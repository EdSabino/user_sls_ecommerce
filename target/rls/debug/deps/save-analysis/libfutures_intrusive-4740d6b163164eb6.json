{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1","program":"C:\\Users\\Eduardo\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","futures_intrusive","--edition=2018","C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"parking_lot\"","--cfg","feature=\"std\"","-C","metadata=4740d6b163164eb6","-C","extra-filename=-4740d6b163164eb6","--out-dir","c:\\Users\\Eduardo\\Documents\\ecommerce\\users\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Eduardo\\Documents\\ecommerce\\users\\target\\rls\\debug\\deps","--extern","futures_core=c:\\Users\\Eduardo\\Documents\\ecommerce\\users\\target\\rls\\debug\\deps\\libfutures_core-afe81e34543fab9e.rmeta","--extern","lock_api=c:\\Users\\Eduardo\\Documents\\ecommerce\\users\\target\\rls\\debug\\deps\\liblock_api-c3d782ec4ddd60c4.rmeta","--extern","parking_lot=c:\\Users\\Eduardo\\Documents\\ecommerce\\users\\target\\rls\\debug\\deps\\libparking_lot-6c0229f9e87a0d69.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Eduardo\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Eduardo\\Documents\\ecommerce\\users\\target\\rls\\debug\\deps\\libfutures_intrusive-4740d6b163164eb6.rmeta"},"prelude":{"crate_id":{"name":"futures_intrusive","disambiguator":[16105135459652574424,965302056125821626]},"crate_root":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src","external_crates":[{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[9692112137008559588,2338260418742546759]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","num":2,"id":{"name":"core","disambiguator":[6793375821364100956,1977476470487761730]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12127507174405006601,16904355616426790179]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11442534744397595723,17249706061084217292]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8290285128153629620,5457655969661569285]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[1331056181559175587,10367469256582268827]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17539204049578980739,14279095908370612950]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11416202000959860181,16002808916448349423]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15996931893539602890,12021989227085004909]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11006369346947015869,12629203874040878905]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[9324299596992278055,4716464803590583331]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[17286888103038733980,5619676640534054088]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","num":13,"id":{"name":"lock_api","disambiguator":[3227798942777437645,8000083833740042643]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","num":14,"id":{"name":"scopeguard","disambiguator":[8659203029979824177,14656626648143315754]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","num":15,"id":{"name":"futures_core","disambiguator":[9729584551562608598,2484260142089883969]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","num":16,"id":{"name":"parking_lot","disambiguator":[17672514458281776664,1527659041237613250]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","num":17,"id":{"name":"parking_lot_core","disambiguator":[5673560538461229830,8420451801478384634]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","num":18,"id":{"name":"cfg_if","disambiguator":[11351533848344397580,13003978539646218076]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","num":19,"id":{"name":"smallvec","disambiguator":[2717531899327305242,9243573077030401436]}},{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","num":20,"id":{"name":"winapi","disambiguator":[11167735428914363575,12300766417278645855]}}],"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":0,"byte_end":9651,"line_start":1,"line_end":235,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1643},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9483,"byte_end":9491,"line_start":223,"line_end":223,"column_start":20,"column_end":28},"alias_span":null,"name":"NoopLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":10281,"byte_end":10290,"line_start":4,"line_end":4,"column_start":21,"column_end":30},"alias_span":null,"name":"RealArray","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":10332,"byte_end":10340,"line_start":7,"line_end":7,"column_start":23,"column_end":31},"alias_span":null,"name":"ArrayBuf","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":10342,"byte_end":10349,"line_start":7,"line_end":7,"column_start":33,"column_end":40},"alias_span":null,"name":"RingBuf","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":10400,"byte_end":10412,"line_start":10,"line_end":10,"column_start":22,"column_end":34},"alias_span":null,"name":"FixedHeapBuf","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":10461,"byte_end":10475,"line_start":12,"line_end":12,"column_start":22,"column_end":36},"alias_span":null,"name":"GrowingHeapBuf","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62343,"byte_end":62359,"line_start":7,"line_end":7,"column_start":23,"column_end":39},"alias_span":null,"name":"ChannelSendError","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62343,"byte_end":62359,"line_start":7,"line_end":7,"column_start":23,"column_end":39},"alias_span":null,"name":"ChannelSendError","value":"","parent":{"krate":0,"index":199}},{"kind":"Use","ref_id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62361,"byte_end":62376,"line_start":7,"line_end":7,"column_start":41,"column_end":56},"alias_span":null,"name":"TryReceiveError","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62378,"byte_end":62390,"line_start":7,"line_end":7,"column_start":58,"column_end":70},"alias_span":null,"name":"TrySendError","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62588,"byte_end":62608,"line_start":15,"line_end":15,"column_start":5,"column_end":25},"alias_span":null,"name":"ChannelReceiveFuture","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62610,"byte_end":62627,"line_start":15,"line_end":15,"column_start":27,"column_end":44},"alias_span":null,"name":"ChannelSendFuture","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":2023},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62629,"byte_end":62640,"line_start":15,"line_end":15,"column_start":46,"column_end":57},"alias_span":null,"name":"CloseStatus","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62684,"byte_end":62705,"line_start":20,"line_end":20,"column_start":25,"column_end":46},"alias_span":null,"name":"GenericOneshotChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62707,"byte_end":62726,"line_start":20,"line_end":20,"column_start":48,"column_end":67},"alias_span":null,"name":"LocalOneshotChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62779,"byte_end":62793,"line_start":23,"line_end":23,"column_start":24,"column_end":38},"alias_span":null,"name":"OneshotChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62859,"byte_end":62889,"line_start":28,"line_end":28,"column_start":5,"column_end":35},"alias_span":null,"name":"GenericOneshotBroadcastChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62891,"byte_end":62919,"line_start":28,"line_end":28,"column_start":37,"column_end":65},"alias_span":null,"name":"LocalOneshotBroadcastChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62984,"byte_end":63007,"line_start":32,"line_end":32,"column_start":34,"column_end":57},"alias_span":null,"name":"OneshotBroadcastChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63062,"byte_end":63090,"line_start":36,"line_end":36,"column_start":5,"column_end":33},"alias_span":null,"name":"GenericStateBroadcastChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63092,"byte_end":63118,"line_start":36,"line_end":36,"column_start":35,"column_end":61},"alias_span":null,"name":"LocalStateBroadcastChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63120,"byte_end":63127,"line_start":36,"line_end":36,"column_start":63,"column_end":70},"alias_span":null,"name":"StateId","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63133,"byte_end":63151,"line_start":37,"line_end":37,"column_start":5,"column_end":23},"alias_span":null,"name":"StateReceiveFuture","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63214,"byte_end":63235,"line_start":41,"line_end":41,"column_start":32,"column_end":53},"alias_span":null,"name":"StateBroadcastChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63270,"byte_end":63284,"line_start":45,"line_end":45,"column_start":22,"column_end":36},"alias_span":null,"name":"GenericChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63286,"byte_end":63298,"line_start":45,"line_end":45,"column_start":38,"column_end":50},"alias_span":null,"name":"LocalChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63300,"byte_end":63322,"line_start":45,"line_end":45,"column_start":52,"column_end":74},"alias_span":null,"name":"LocalUnbufferedChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63373,"byte_end":63380,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"alias_span":null,"name":"Channel","value":"","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63382,"byte_end":63399,"line_start":48,"line_end":48,"column_start":31,"column_end":48},"alias_span":null,"name":"UnbufferedChannel","value":"","parent":{"krate":0,"index":188}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63717,"byte_end":63718,"line_start":58,"line_end":58,"column_start":55,"column_end":56},"alias_span":null,"name":"*","value":"ChannelReceiveFuture, ChannelSendFuture","parent":{"krate":0,"index":1107}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63764,"byte_end":63765,"line_start":59,"line_end":59,"column_start":45,"column_end":46},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1107}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63814,"byte_end":63815,"line_start":60,"line_end":60,"column_start":48,"column_end":49},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1107}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63874,"byte_end":63875,"line_start":61,"line_end":61,"column_start":58,"column_end":59},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1107}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63932,"byte_end":63933,"line_start":62,"line_end":62,"column_start":56,"column_end":57},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1107}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63994,"byte_end":63995,"line_start":67,"line_end":67,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"shared","parent":{"krate":0,"index":188}},{"kind":"Use","ref_id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189410,"byte_end":189433,"line_start":9,"line_end":9,"column_start":5,"column_end":28},"alias_span":null,"name":"GenericManualResetEvent","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189435,"byte_end":189460,"line_start":9,"line_end":9,"column_start":30,"column_end":55},"alias_span":null,"name":"GenericWaitForEventFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189462,"byte_end":189483,"line_start":9,"line_end":9,"column_start":57,"column_end":78},"alias_span":null,"name":"LocalManualResetEvent","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189489,"byte_end":189512,"line_start":10,"line_end":10,"column_start":5,"column_end":28},"alias_span":null,"name":"LocalWaitForEventFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189579,"byte_end":189595,"line_start":14,"line_end":14,"column_start":36,"column_end":52},"alias_span":null,"name":"ManualResetEvent","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189597,"byte_end":189615,"line_start":14,"line_end":14,"column_start":54,"column_end":72},"alias_span":null,"name":"WaitForEventFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189658,"byte_end":189670,"line_start":19,"line_end":19,"column_start":5,"column_end":17},"alias_span":null,"name":"GenericMutex","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189672,"byte_end":189689,"line_start":19,"line_end":19,"column_start":19,"column_end":36},"alias_span":null,"name":"GenericMutexGuard","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1275},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189691,"byte_end":189713,"line_start":19,"line_end":19,"column_start":38,"column_end":60},"alias_span":null,"name":"GenericMutexLockFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189715,"byte_end":189725,"line_start":19,"line_end":19,"column_start":62,"column_end":72},"alias_span":null,"name":"LocalMutex","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189731,"byte_end":189746,"line_start":20,"line_end":20,"column_start":5,"column_end":20},"alias_span":null,"name":"LocalMutexGuard","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189748,"byte_end":189768,"line_start":20,"line_end":20,"column_start":22,"column_end":42},"alias_span":null,"name":"LocalMutexLockFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189822,"byte_end":189827,"line_start":24,"line_end":24,"column_start":23,"column_end":28},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189829,"byte_end":189839,"line_start":24,"line_end":24,"column_start":30,"column_end":40},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189841,"byte_end":189856,"line_start":24,"line_end":24,"column_start":42,"column_end":57},"alias_span":null,"name":"MutexLockFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189907,"byte_end":189923,"line_start":29,"line_end":29,"column_start":5,"column_end":21},"alias_span":null,"name":"GenericSemaphore","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189925,"byte_end":189954,"line_start":29,"line_end":29,"column_start":23,"column_end":52},"alias_span":null,"name":"GenericSemaphoreAcquireFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189956,"byte_end":189980,"line_start":29,"line_end":29,"column_start":54,"column_end":78},"alias_span":null,"name":"GenericSemaphoreReleaser","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189986,"byte_end":190000,"line_start":30,"line_end":30,"column_start":5,"column_end":19},"alias_span":null,"name":"LocalSemaphore","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":190002,"byte_end":190029,"line_start":30,"line_end":30,"column_start":21,"column_end":48},"alias_span":null,"name":"LocalSemaphoreAcquireFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1454},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":190031,"byte_end":190053,"line_start":30,"line_end":30,"column_start":50,"column_end":72},"alias_span":null,"name":"LocalSemaphoreReleaser","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1460},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":190116,"byte_end":190125,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"alias_span":null,"name":"Semaphore","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":190127,"byte_end":190149,"line_start":35,"line_end":35,"column_start":16,"column_end":38},"alias_span":null,"name":"SemaphoreAcquireFuture","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":190151,"byte_end":190168,"line_start":35,"line_end":35,"column_start":40,"column_end":57},"alias_span":null,"name":"SemaphoreReleaser","value":"","parent":{"krate":0,"index":1114}},{"kind":"Use","ref_id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241538,"byte_end":241543,"line_start":9,"line_end":9,"column_start":23,"column_end":28},"alias_span":null,"name":"Clock","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241545,"byte_end":241554,"line_start":9,"line_end":9,"column_start":30,"column_end":39},"alias_span":null,"name":"MockClock","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241603,"byte_end":241611,"line_start":12,"line_end":12,"column_start":22,"column_end":30},"alias_span":null,"name":"StdClock","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241653,"byte_end":241672,"line_start":17,"line_end":17,"column_start":5,"column_end":24},"alias_span":null,"name":"GenericTimerService","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1557},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241674,"byte_end":241684,"line_start":17,"line_end":17,"column_start":26,"column_end":36},"alias_span":null,"name":"LocalTimer","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241686,"byte_end":241702,"line_start":17,"line_end":17,"column_start":38,"column_end":54},"alias_span":null,"name":"LocalTimerFuture","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1624},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241704,"byte_end":241721,"line_start":17,"line_end":17,"column_start":56,"column_end":73},"alias_span":null,"name":"LocalTimerService","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1560},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241727,"byte_end":241732,"line_start":18,"line_end":18,"column_start":5,"column_end":10},"alias_span":null,"name":"Timer","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1608},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241734,"byte_end":241745,"line_start":18,"line_end":18,"column_start":12,"column_end":23},"alias_span":null,"name":"TimerFuture","value":"","parent":{"krate":0,"index":1477}},{"kind":"Use","ref_id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241798,"byte_end":241810,"line_start":22,"line_end":22,"column_start":22,"column_end":34},"alias_span":null,"name":"TimerService","value":"","parent":{"krate":0,"index":1477}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":0,"byte_end":9651,"line_start":1,"line_end":235,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":111},{"krate":0,"index":144},{"krate":0,"index":188},{"krate":0,"index":1114},{"krate":0,"index":1477},{"krate":0,"index":1637}],"decl_id":null,"docs":" Synchronization primitives and utilities based on intrusive collections.","sig":null,"attributes":[{"value":"/ Synchronization primitives and utilities based on intrusive collections.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":77,"byte_end":80,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides a variety of `Futures`-based and `async/await` compatible","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":81,"byte_end":162,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ types that are based on the idea of intrusive collections:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":163,"byte_end":225,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ - Channels in a variety of flavors:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":226,"byte_end":265,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/   - Oneshot","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":266,"byte_end":281,"line_start":6,"line_end":6,"column_start":1,"column_end":16}},{"value":"/   - Multi-Producer Multi-Consumer (MPMC)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":282,"byte_end":326,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/   - State Broadcast","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":327,"byte_end":350,"line_start":8,"line_end":8,"column_start":1,"column_end":24}},{"value":"/ - Synchronization Primitives:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":351,"byte_end":384,"line_start":9,"line_end":9,"column_start":1,"column_end":34}},{"value":"/   - Manual Reset Event","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":385,"byte_end":411,"line_start":10,"line_end":10,"column_start":1,"column_end":27}},{"value":"/   - Mutex","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":412,"byte_end":425,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/   - Semaphore","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":426,"byte_end":443,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/ - A timer","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":444,"byte_end":457,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":458,"byte_end":461,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Intrusive collections?","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":462,"byte_end":491,"line_start":15,"line_end":15,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":492,"byte_end":495,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ In an intrusive collection, the elements that want to get stored inside the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":496,"byte_end":575,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ collection provide the means to store themselves inside the collection.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":576,"byte_end":651,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ E.g. in an intrusive linked list, each element that gets stored inside the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":652,"byte_end":730,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ list contains a pointer field that points to the next list element. E.g.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":731,"byte_end":807,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":808,"byte_end":811,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":812,"byte_end":819,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ // The element which is intended to be stored inside an intrusive container","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":820,"byte_end":899,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ struct ListElement {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":900,"byte_end":924,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/    data: u32,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":925,"byte_end":942,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/    next: *mut ListElement,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":943,"byte_end":973,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":974,"byte_end":979,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":980,"byte_end":983,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // The intrusive container","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":984,"byte_end":1014,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"/ struct List {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1015,"byte_end":1032,"line_start":30,"line_end":30,"column_start":1,"column_end":18}},{"value":"/     head: *mut ListElement,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1033,"byte_end":1064,"line_start":31,"line_end":31,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1065,"byte_end":1070,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1071,"byte_end":1078,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1079,"byte_end":1082,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The advantage here is that the intrusive collection (here: the list) requires","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1083,"byte_end":1164,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/ only a fixed amount of memory. In this case it only needs a pointer to the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1165,"byte_end":1243,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ first element.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1244,"byte_end":1262,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1263,"byte_end":1266,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The list container itself has a fixed size of a single pointer independent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1267,"byte_end":1345,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ of the number of stored elements.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1346,"byte_end":1383,"line_start":40,"line_end":40,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1384,"byte_end":1387,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Intrusive lists are often used in low-level code like in operating system","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1388,"byte_end":1465,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ kernels.  E.g. they can be used for storing elements that represent threads","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1466,"byte_end":1545,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ that are blocked and waiting on queue.  In that case the stored elements can","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1546,"byte_end":1626,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ be on the call stack of the caller of each blocked thread, since the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1627,"byte_end":1699,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ call stack won't change as long as the thread is blocked.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1700,"byte_end":1761,"line_start":46,"line_end":46,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1762,"byte_end":1765,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ### Application in Futures","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1766,"byte_end":1796,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1797,"byte_end":1800,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ This library brings this idea into the world of Rusts `Future`s. Due to the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1801,"byte_end":1880,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ addition of `Pin`ning, the address of a certain `Future` is not allowed to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1881,"byte_end":1959,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ change between the first call to `poll()` and when the `Future` is dropped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":1960,"byte_end":2039,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ This means the data inside the `Future` itself can be inserted into an","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2040,"byte_end":2114,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"/ intrusive container. If the the call to `Future::poll()` is not immedately","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2115,"byte_end":2193,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ ready, some parts of the `Future` itself are registered in the type which","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2194,"byte_end":2271,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ yielded the `Future`. Each `Future` can store a `Waker`. When the original","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2272,"byte_end":2350,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ type becomes ready, it can iterate through the list of registered `Future`s,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2351,"byte_end":2431,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ wakeup associated tasks, and potentially remove them from its queue.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2432,"byte_end":2504,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2505,"byte_end":2508,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The result is that the future-yielding type is not required to copy an","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2509,"byte_end":2583,"line_start":60,"line_end":60,"column_start":1,"column_end":75}},{"value":"/ arbitrary number of `Waker` objects into itself, and thereby does not require","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2584,"byte_end":2665,"line_start":61,"line_end":61,"column_start":1,"column_end":82}},{"value":"/ dynamic memory for this task.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2666,"byte_end":2699,"line_start":62,"line_end":62,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2700,"byte_end":2703,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ When a `Future` gets destructed/dropped, it must make sure to remove itself","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2704,"byte_end":2783,"line_start":64,"line_end":64,"column_start":1,"column_end":80}},{"value":"/ from any collections that refer to it to avoid invalid memory accesses.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2784,"byte_end":2859,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2860,"byte_end":2863,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This library implements common synchronization primitives for the usage in","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2864,"byte_end":2942,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ asychronous code based on this concept.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2943,"byte_end":2986,"line_start":68,"line_end":68,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2987,"byte_end":2990,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The implementation requires the usage of a fair chunk of `unsafe`","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":2991,"byte_end":3060,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/ annotations. However the provided user-level API is intended to be fully safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3061,"byte_end":3143,"line_start":71,"line_end":71,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3144,"byte_end":3147,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ## Features of this library","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3148,"byte_end":3179,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3180,"byte_end":3183,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The following types are currently implemented:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3184,"byte_end":3234,"line_start":75,"line_end":75,"column_start":1,"column_end":51}},{"value":"/ - Channels (oneshot and multi-producer-multi-consumer)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3235,"byte_end":3293,"line_start":76,"line_end":76,"column_start":1,"column_end":59}},{"value":"/ - Synchronization primitives (async mutexes and events)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3294,"byte_end":3353,"line_start":77,"line_end":77,"column_start":1,"column_end":60}},{"value":"/ - Timers","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3354,"byte_end":3366,"line_start":78,"line_end":78,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3367,"byte_end":3370,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Design goals for the library","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3371,"byte_end":3406,"line_start":80,"line_end":80,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3407,"byte_end":3410,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - Provide implementations of common synchronization primitives in a platform","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3411,"byte_end":3491,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/   independent fashion.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3492,"byte_end":3518,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/ - Support `no-std` environments. As many types as possible are also provided","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3519,"byte_end":3599,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/   for `no-std` environments. The library should boost the ability to use","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3600,"byte_end":3676,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/   async Rust code in environments like:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3677,"byte_end":3720,"line_start":86,"line_end":86,"column_start":1,"column_end":44}},{"value":"/   - Microcontrollers (RTOS and bare-metal)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3721,"byte_end":3767,"line_start":87,"line_end":87,"column_start":1,"column_end":47}},{"value":"/   - Kernels","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3768,"byte_end":3783,"line_start":88,"line_end":88,"column_start":1,"column_end":16}},{"value":"/   - Drivers","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3784,"byte_end":3799,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ - Avoid dynamic memory allocations at runtime.  After objects from this","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3800,"byte_end":3875,"line_start":90,"line_end":90,"column_start":1,"column_end":76}},{"value":"/   library have been created, they should not require allocation of any","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3876,"byte_end":3950,"line_start":91,"line_end":91,"column_start":1,"column_end":75}},{"value":"/   further memory at runtime.  E.g. they should not need to allocate memory","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":3951,"byte_end":4029,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/   for each call to an asynchronous function or each time a new task accesses","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4030,"byte_end":4110,"line_start":93,"line_end":93,"column_start":1,"column_end":81}},{"value":"/   the same object in parallel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4111,"byte_end":4145,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/ - Offer familiar APIs.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4146,"byte_end":4172,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/   The library tries to mimic the APIs of existing Rust libraries like the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4173,"byte_end":4250,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/   standard library and `futures-rs` as closely as possible.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4251,"byte_end":4314,"line_start":97,"line_end":97,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4315,"byte_end":4318,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ## Non goals","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4319,"byte_end":4335,"line_start":99,"line_end":99,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4336,"byte_end":4339,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - Provide IO primitives (like sockets), or platform specific implementations.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4340,"byte_end":4421,"line_start":101,"line_end":101,"column_start":1,"column_end":82}},{"value":"/ - Reach the highest possible performance in terms of throughput and latency.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4422,"byte_end":4502,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/   While code in this library is optimized for performance, portability","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4503,"byte_end":4577,"line_start":103,"line_end":103,"column_start":1,"column_end":75}},{"value":"/   and deterministic memory usage are more important goals.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4578,"byte_end":4640,"line_start":104,"line_end":104,"column_start":1,"column_end":63}},{"value":"/ - Provide future wrappers for platform-specific APIs.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4641,"byte_end":4698,"line_start":105,"line_end":105,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4699,"byte_end":4702,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ## Local, Non-local and shared flavors","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4703,"byte_end":4745,"line_start":107,"line_end":107,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4746,"byte_end":4749,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ The library provides types in a variety of flavors:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4750,"byte_end":4805,"line_start":109,"line_end":109,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4806,"byte_end":4809,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ - A local flavor (e.g. [`channel::LocalChannel`])","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4810,"byte_end":4863,"line_start":111,"line_end":111,"column_start":1,"column_end":54}},{"value":"/ - A non-local flavor (e.g. [`channel::Channel`])","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4864,"byte_end":4916,"line_start":112,"line_end":112,"column_start":1,"column_end":53}},{"value":"/ - A shared flavor (e.g. [`channel::shared::Sender`])","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4917,"byte_end":4973,"line_start":113,"line_end":113,"column_start":1,"column_end":57}},{"value":"/ - A generic flavor (e.g. [`channel::GenericChannel`] and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":4974,"byte_end":5034,"line_start":114,"line_end":114,"column_start":1,"column_end":61}},{"value":"/   [`channel::shared::GenericSender`])","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5035,"byte_end":5076,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5077,"byte_end":5080,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The difference between these types lie in their thread-safety. The non-local","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5081,"byte_end":5161,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/ flavors of types can be accessed from multiple threads (and thereby also","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5162,"byte_end":5238,"line_start":118,"line_end":118,"column_start":1,"column_end":77}},{"value":"/ futures tasks) concurrently. This means they implement the `Sync` trait in","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5239,"byte_end":5317,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ addition to the `Send` trait.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5318,"byte_end":5351,"line_start":120,"line_end":120,"column_start":1,"column_end":34}},{"value":"/ The local flavors only implement the `Send` trait.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5352,"byte_end":5406,"line_start":121,"line_end":121,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5407,"byte_end":5410,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ### Local flavor","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5411,"byte_end":5431,"line_start":123,"line_end":123,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5432,"byte_end":5435,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The local flavors will require no internal synchronization (e.g. internal","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5436,"byte_end":5513,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ Mutexes) and can therefore be provided for all platforms (including `no-std`).","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5514,"byte_end":5596,"line_start":126,"line_end":126,"column_start":1,"column_end":83}},{"value":"/ Due the lack of required synchronization, they are also very fast.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5597,"byte_end":5667,"line_start":127,"line_end":127,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5668,"byte_end":5671,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ It might seem counter-intuitive to provide synchronization primitives that","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5672,"byte_end":5750,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ only work within a single task. However there are a variety of applications","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5751,"byte_end":5830,"line_start":130,"line_end":130,"column_start":1,"column_end":80}},{"value":"/ where these can be used to coordinate sub-tasks (futures that are polled on","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5831,"byte_end":5910,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ a single task concurrently).","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5911,"byte_end":5943,"line_start":132,"line_end":132,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5944,"byte_end":5947,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ The following example demonstrates this use-case:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":5948,"byte_end":6001,"line_start":134,"line_end":134,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6002,"byte_end":6005,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6006,"byte_end":6013,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use futures::join;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6014,"byte_end":6038,"line_start":137,"line_end":137,"column_start":1,"column_end":25}},{"value":"/ # use futures_intrusive::sync::LocalManualResetEvent;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6039,"byte_end":6096,"line_start":138,"line_end":138,"column_start":1,"column_end":58}},{"value":"/ async fn async_fn() {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6097,"byte_end":6122,"line_start":139,"line_end":139,"column_start":1,"column_end":26}},{"value":"/     let event = LocalManualResetEvent::new(false);","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6123,"byte_end":6177,"line_start":140,"line_end":140,"column_start":1,"column_end":55}},{"value":"/     let task_a = async {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6178,"byte_end":6206,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/         // Wait for the event","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6207,"byte_end":6240,"line_start":142,"line_end":142,"column_start":1,"column_end":34}},{"value":"/         event.wait().await;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6241,"byte_end":6272,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/         // Do something with the knowledge that task_b reached a certain state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6273,"byte_end":6355,"line_start":144,"line_end":144,"column_start":1,"column_end":83}},{"value":"/     };","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6356,"byte_end":6366,"line_start":145,"line_end":145,"column_start":1,"column_end":11}},{"value":"/     let task_b = async {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6367,"byte_end":6395,"line_start":146,"line_end":146,"column_start":1,"column_end":29}},{"value":"/         // Some complex asynchronous workflow here","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6396,"byte_end":6450,"line_start":147,"line_end":147,"column_start":1,"column_end":55}},{"value":"/         // ...","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6451,"byte_end":6469,"line_start":148,"line_end":148,"column_start":1,"column_end":19}},{"value":"/         // Signal task_a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6470,"byte_end":6498,"line_start":149,"line_end":149,"column_start":1,"column_end":29}},{"value":"/         event.set();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6499,"byte_end":6523,"line_start":150,"line_end":150,"column_start":1,"column_end":25}},{"value":"/     };","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6524,"byte_end":6534,"line_start":151,"line_end":151,"column_start":1,"column_end":11}},{"value":"/     join!(task_a, task_b);","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6535,"byte_end":6565,"line_start":152,"line_end":152,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6566,"byte_end":6571,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6572,"byte_end":6579,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6580,"byte_end":6583,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ ### Non-local flavor","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6584,"byte_end":6608,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6609,"byte_end":6612,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ The non-local flavors can be used between arbitrary tasks and threads.  They","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6613,"byte_end":6693,"line_start":158,"line_end":158,"column_start":1,"column_end":81}},{"value":"/ use internal synchronization for this in form of an embedded `Mutex` of","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6694,"byte_end":6769,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/ [`parking_lot::Mutex`] type.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6770,"byte_end":6802,"line_start":160,"line_end":160,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6803,"byte_end":6806,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The non-local flavors are only available in `alloc` environments.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6807,"byte_end":6876,"line_start":162,"line_end":162,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6877,"byte_end":6880,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ ### Shared flavor","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6881,"byte_end":6902,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6903,"byte_end":6906,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ For some types a shared flavor is provided. Non-local flavors of types are","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6907,"byte_end":6985,"line_start":166,"line_end":166,"column_start":1,"column_end":79}},{"value":"/ `Sync`, but they still can only be shared by reference between various tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":6986,"byte_end":7067,"line_start":167,"line_end":167,"column_start":1,"column_end":82}},{"value":"/ Shared flavors are also `Sync`, but the types additionally implement the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7069,"byte_end":7145,"line_start":169,"line_end":169,"column_start":1,"column_end":77}},{"value":"/ `Clone` trait, which allows duplicating the object, and passing ownership of","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7146,"byte_end":7226,"line_start":170,"line_end":170,"column_start":1,"column_end":81}},{"value":"/ it to a different task. These types allow avoiding references (and thereby","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7227,"byte_end":7305,"line_start":171,"line_end":171,"column_start":1,"column_end":79}},{"value":"/ lifetimes) in some scenarios, which makes them more convenient to use.  The","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7306,"byte_end":7385,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ types also return `Future`s which do not have an associated lifetime.  This","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7386,"byte_end":7465,"line_start":173,"line_end":173,"column_start":1,"column_end":80}},{"value":"/ allows using those types as implementations of traits without the need for","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7466,"byte_end":7544,"line_start":174,"line_end":174,"column_start":1,"column_end":79}},{"value":"/ generic associated types (GATs).","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7545,"byte_end":7581,"line_start":175,"line_end":175,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7582,"byte_end":7585,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Due to the requirement of atomic reference counting, these types are","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7586,"byte_end":7658,"line_start":177,"line_end":177,"column_start":1,"column_end":73}},{"value":"/ currently only available for `alloc` environments.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7659,"byte_end":7713,"line_start":178,"line_end":178,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7714,"byte_end":7717,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ### Generic flavor","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7718,"byte_end":7740,"line_start":180,"line_end":180,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7741,"byte_end":7744,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ The generic flavors of provided types are parameterized around a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7745,"byte_end":7813,"line_start":182,"line_end":182,"column_start":1,"column_end":69}},{"value":"/ [`lock_api::RawMutex`] type. These form the base for the non-local and shared","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7814,"byte_end":7895,"line_start":183,"line_end":183,"column_start":1,"column_end":82}},{"value":"/ flavors which simply parameterize the generic flavor in either a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7896,"byte_end":7964,"line_start":184,"line_end":184,"column_start":1,"column_end":69}},{"value":"/ non-thread-safe or thread-safe fashion.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":7965,"byte_end":8008,"line_start":185,"line_end":185,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8009,"byte_end":8012,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ Users can directly use the generic flavors to adapt the provided thread-safe","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8013,"byte_end":8093,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/ types for use in `no-std` environments.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8094,"byte_end":8137,"line_start":188,"line_end":188,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8138,"byte_end":8141,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ E.g. by providing a custom [`lock_api::RawMutex`]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8142,"byte_end":8195,"line_start":190,"line_end":190,"column_start":1,"column_end":54}},{"value":"/ implementation, the following platforms can be supported:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8196,"byte_end":8257,"line_start":191,"line_end":191,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8258,"byte_end":8261,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ - For RTOS platforms, RTOS-specific mutexes can be wrapped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8262,"byte_end":8325,"line_start":193,"line_end":193,"column_start":1,"column_end":64}},{"value":"/ - For kernel development, spinlock based mutexes can be created.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8326,"byte_end":8394,"line_start":194,"line_end":194,"column_start":1,"column_end":69}},{"value":"/ - For embedded development, mutexes which just disable interrupts can be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8395,"byte_end":8471,"line_start":195,"line_end":195,"column_start":1,"column_end":77}},{"value":"/   utilized.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8472,"byte_end":8487,"line_start":196,"line_end":196,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8488,"byte_end":8491,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8492,"byte_end":8495,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ ## Relation to types in other libraries","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8496,"byte_end":8539,"line_start":199,"line_end":199,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8540,"byte_end":8543,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ Other libraries (e.g. `futures-rs` and `tokio`) provide many primitives that","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8544,"byte_end":8624,"line_start":201,"line_end":201,"column_start":1,"column_end":81}},{"value":"/ are comparable feature-wise to the types in this library.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8625,"byte_end":8686,"line_start":202,"line_end":202,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8687,"byte_end":8690,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ The most important differences are:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8691,"byte_end":8730,"line_start":204,"line_end":204,"column_start":1,"column_end":40}},{"value":"/ - This library has a bigger focus on `no-std` environments, and does not","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8731,"byte_end":8807,"line_start":205,"line_end":205,"column_start":1,"column_end":77}},{"value":"/   only try to provide an implementation for `alloc` or `std`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8808,"byte_end":8873,"line_start":206,"line_end":206,"column_start":1,"column_end":66}},{"value":"/ - The types in this library do not require dynamic memory allocation for","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8874,"byte_end":8950,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/   waking up an arbitrary number of tasks waiting on a particular","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":8951,"byte_end":9019,"line_start":208,"line_end":208,"column_start":1,"column_end":69}},{"value":"/   `Future`. Other libraries typically require heap-allocated nodes of","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9020,"byte_end":9093,"line_start":209,"line_end":209,"column_start":1,"column_end":74}},{"value":"/   growing vectors for handling a varying number of tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9094,"byte_end":9155,"line_start":210,"line_end":210,"column_start":1,"column_end":62}},{"value":"/ - The `Future`s produced by this library are all `!Unpin`, which might make","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9156,"byte_end":9235,"line_start":211,"line_end":211,"column_start":1,"column_end":80}},{"value":"/   them less ergonomic to use.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9236,"byte_end":9269,"line_start":212,"line_end":212,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9270,"byte_end":9273,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"warn(missing_docs, missing_debug_implementations)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9318,"byte_end":9371,"line_start":216,"line_end":216,"column_start":1,"column_end":54}},{"value":"deny(bare_trait_objects)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9372,"byte_end":9400,"line_start":217,"line_end":217,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1643},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","byte_start":9877,"byte_end":9885,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"NoopLock","qualname":"::noop_lock::NoopLock","value":"NoopLock {  }","parent":null,"children":[{"krate":0,"index":1644}],"decl_id":null,"docs":" An unsafe (non-thread-safe) lock, equivalent to UnsafeCell\n","sig":null,"attributes":[{"value":"/ An unsafe (non-thread-safe) lock, equivalent to UnsafeCell","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","byte_start":9786,"byte_end":9848,"line_start":6,"line_end":6,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" Buffer types\n","sig":null,"attributes":[{"value":"/ Buffer types","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\mod.rs","byte_start":10227,"byte_end":10243,"line_start":1,"line_end":1,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11786,"byte_end":11795,"line_start":41,"line_end":41,"column_start":18,"column_end":27},"name":"RealArray","qualname":"::buffer::real_array::RealArray","value":"RealArray<T>","parent":null,"children":[{"krate":0,"index":20}],"decl_id":null,"docs":" A marker trait which may only be implemented for native array types, like\n `[T; 2]`. The library incorporates several components that are parameterized\n by array types, but currently Rust provides no safe mechanism to express\n that.","sig":null,"attributes":[{"value":"/ A marker trait which may only be implemented for native array types, like","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10478,"byte_end":10555,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ `[T; 2]`. The library incorporates several components that are parameterized","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10556,"byte_end":10636,"line_start":2,"line_end":2,"column_start":1,"column_end":81}},{"value":"/ by array types, but currently Rust provides no safe mechanism to express","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10637,"byte_end":10713,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ that.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10714,"byte_end":10723,"line_start":4,"line_end":4,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10724,"byte_end":10727,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ In order to work around the limitations, these methods only accept arrays","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10728,"byte_end":10805,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ which implement the `RealArray` type. The library provides an implementation","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10806,"byte_end":10886,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ of `RealArray` for arrays up to length 64, as well as for all powers of 2","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10887,"byte_end":10964,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ up to 64k.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10965,"byte_end":10979,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10980,"byte_end":10983,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ In order to let the library accept arrays of bigger sizes, `RealArray` can","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":10984,"byte_end":11062,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ be implemented by users via newtypes. A type as defined in the following","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11063,"byte_end":11139,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ example can be passed to the library:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11140,"byte_end":11181,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11182,"byte_end":11185,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11186,"byte_end":11193,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use futures_intrusive::buffer::RealArray;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11194,"byte_end":11239,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/ use futures_intrusive::channel::LocalChannel;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11240,"byte_end":11289,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11290,"byte_end":11293,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ struct I32x384Array([i32; 384]);","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11294,"byte_end":11330,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"/ unsafe impl RealArray<i32> for I32x384Array {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11331,"byte_end":11380,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/     const LEN: usize = 384;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11381,"byte_end":11412,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11413,"byte_end":11418,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11419,"byte_end":11422,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ impl AsMut<[i32]> for I32x384Array {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11423,"byte_end":11463,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/     fn as_mut(&mut self) -> &mut [i32] {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11464,"byte_end":11508,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/         &mut self.0","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11509,"byte_end":11532,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/     }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11533,"byte_end":11542,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11543,"byte_end":11548,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11549,"byte_end":11552,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ impl AsRef<[i32]> for I32x384Array {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11553,"byte_end":11593,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/     fn as_ref(&self) -> &[i32] {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11594,"byte_end":11630,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/         &self.0","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11631,"byte_end":11650,"line_start":32,"line_end":32,"column_start":1,"column_end":20}},{"value":"/     }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11651,"byte_end":11660,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11661,"byte_end":11666,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11667,"byte_end":11670,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11671,"byte_end":11686,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/     let channel = LocalChannel::<i32, I32x384Array>::new();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11687,"byte_end":11750,"line_start":37,"line_end":37,"column_start":1,"column_end":64}},{"value":"/ }","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11751,"byte_end":11756,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11757,"byte_end":11760,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11761,"byte_end":11768,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11843,"byte_end":11846,"line_start":43,"line_end":43,"column_start":11,"column_end":14},"name":"LEN","qualname":"::buffer::real_array::RealArray::LEN","value":"usize","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" The length of the array\n","sig":null,"attributes":[{"value":"/ The length of the array","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\real_array.rs","byte_start":11805,"byte_end":11832,"line_start":42,"line_end":42,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12511,"byte_end":12518,"line_start":6,"line_end":6,"column_start":11,"column_end":18},"name":"RingBuf","qualname":"::buffer::ring_buffer::RingBuf","value":"RingBuf","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" A Ring Buffer of items\n","sig":null,"attributes":[{"value":"/ A Ring Buffer of items","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12474,"byte_end":12500,"line_start":5,"line_end":5,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12586,"byte_end":12590,"line_start":8,"line_end":8,"column_start":10,"column_end":14},"name":"Item","qualname":"::buffer::ring_buffer::RingBuf::Item","value":"type Item;","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" The type of stored items inside the Ring Buffer\n","sig":null,"attributes":[{"value":"/ The type of stored items inside the Ring Buffer","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12525,"byte_end":12576,"line_start":7,"line_end":7,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12650,"byte_end":12653,"line_start":11,"line_end":11,"column_start":8,"column_end":11},"name":"new","qualname":"::buffer::ring_buffer::RingBuf::new","value":"pub fn new() -> Self","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Creates a new instance of the Ring Buffer\n","sig":null,"attributes":[{"value":"/ Creates a new instance of the Ring Buffer","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12597,"byte_end":12642,"line_start":10,"line_end":10,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12867,"byte_end":12880,"line_start":15,"line_end":15,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::buffer::ring_buffer::RingBuf::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Creates a new instance of the Ring Buffer with the given capacity.\n `RingBuf` implementations are allowed to ignore the `capacity` hint and\n utilize their default capacity.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of the Ring Buffer with the given capacity.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12669,"byte_end":12739,"line_start":12,"line_end":12,"column_start":5,"column_end":75}},{"value":"/ `RingBuf` implementations are allowed to ignore the `capacity` hint and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12744,"byte_end":12819,"line_start":13,"line_end":13,"column_start":5,"column_end":80}},{"value":"/ utilize their default capacity.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12824,"byte_end":12859,"line_start":14,"line_end":14,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12945,"byte_end":12953,"line_start":18,"line_end":18,"column_start":8,"column_end":16},"name":"capacity","qualname":"::buffer::ring_buffer::RingBuf::capacity","value":"pub fn capacity(&Self) -> usize","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" The capacity of the buffer\n","sig":null,"attributes":[{"value":"/ The capacity of the buffer","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12907,"byte_end":12937,"line_start":17,"line_end":17,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13027,"byte_end":13030,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"len","qualname":"::buffer::ring_buffer::RingBuf::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" The amount of stored items in the buffer\n","sig":null,"attributes":[{"value":"/ The amount of stored items in the buffer","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":12975,"byte_end":13019,"line_start":19,"line_end":19,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13116,"byte_end":13124,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::buffer::ring_buffer::RingBuf::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Returns true if no item is stored inside the buffer.\n","sig":null,"attributes":[{"value":"/ Returns true if no item is stored inside the buffer.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13052,"byte_end":13108,"line_start":21,"line_end":21,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13271,"byte_end":13279,"line_start":28,"line_end":28,"column_start":8,"column_end":16},"name":"can_push","qualname":"::buffer::ring_buffer::RingBuf::can_push","value":"pub fn can_push(&Self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Returns true if there is enough space in the buffer to\n store another item.\n","sig":null,"attributes":[{"value":"/ Returns true if there is enough space in the buffer to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13177,"byte_end":13235,"line_start":26,"line_end":26,"column_start":5,"column_end":63}},{"value":"/ store another item.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13240,"byte_end":13263,"line_start":27,"line_end":27,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13403,"byte_end":13407,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"push","qualname":"::buffer::ring_buffer::RingBuf::push","value":"pub fn push(&mut Self, Self::Item)","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Stores the item at the end of the buffer.\n Panics if there is not enough free space.\n","sig":null,"attributes":[{"value":"/ Stores the item at the end of the buffer.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13300,"byte_end":13345,"line_start":29,"line_end":29,"column_start":5,"column_end":50}},{"value":"/ Panics if there is not enough free space.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13350,"byte_end":13395,"line_start":30,"line_end":30,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13542,"byte_end":13545,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"pop","qualname":"::buffer::ring_buffer::RingBuf::pop","value":"pub fn pop(&mut Self) -> Self::Item","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Returns the oldest item inside the buffer.\n Panics if there is no available item.\n","sig":null,"attributes":[{"value":"/ Returns the oldest item inside the buffer.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13442,"byte_end":13488,"line_start":32,"line_end":32,"column_start":5,"column_end":51}},{"value":"/ Panics if there is no available item.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13493,"byte_end":13534,"line_start":33,"line_end":33,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14054,"byte_end":14062,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"ArrayBuf","qualname":"::buffer::ring_buffer::ArrayBuf","value":"ArrayBuf {  }","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" An array-backed Ring Buffer","sig":null,"attributes":[{"value":"/ An array-backed Ring Buffer","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13575,"byte_end":13606,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13607,"byte_end":13610,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ `A` is the type of the backing array. The backing array must be a real","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13611,"byte_end":13685,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ array. In order to verify this it must satisfy the [`RealArray`] constraint.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13686,"byte_end":13766,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ In order to create a Ring Buffer backed by an array of 5 integer elements,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13767,"byte_end":13845,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ the following code can be utilized:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13846,"byte_end":13885,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13886,"byte_end":13889,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13890,"byte_end":13897,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use futures_intrusive::buffer::{ArrayBuf, RingBuf};","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13898,"byte_end":13953,"line_start":45,"line_end":45,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13954,"byte_end":13957,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ type Buffer5 = ArrayBuf<i32, [i32; 5]>;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":13958,"byte_end":14001,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/ let buffer = Buffer5::new();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14002,"byte_end":14034,"line_start":48,"line_end":48,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14035,"byte_end":14042,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17609,"byte_end":17621,"line_start":181,"line_end":181,"column_start":16,"column_end":28},"name":"FixedHeapBuf","qualname":"::buffer::ring_buffer::if_alloc::FixedHeapBuf","value":"FixedHeapBuf {  }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"decl_id":null,"docs":" A Ring Buffer which stores all items on the heap.","sig":null,"attributes":[{"value":"/ A Ring Buffer which stores all items on the heap.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17381,"byte_end":17434,"line_start":177,"line_end":177,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17439,"byte_end":17442,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ The `FixedHeapBuf` will allocate its capacity ahead of time. This is good","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17447,"byte_end":17524,"line_start":179,"line_end":179,"column_start":5,"column_end":82}},{"value":"/ fit when you have a constant latency between two components.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17529,"byte_end":17593,"line_start":180,"line_end":180,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19584,"byte_end":19598,"line_start":252,"line_end":252,"column_start":16,"column_end":30},"name":"GrowingHeapBuf","qualname":"::buffer::ring_buffer::if_alloc::GrowingHeapBuf","value":"GrowingHeapBuf {  }","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91}],"decl_id":null,"docs":" A Ring Buffer which stores all items on the heap but grows dynamically.","sig":null,"attributes":[{"value":"/ A Ring Buffer which stores all items on the heap but grows dynamically.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19154,"byte_end":19229,"line_start":245,"line_end":245,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19234,"byte_end":19237,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ A `GrowingHeapBuf` does not allocate the capacity ahead of time, as","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19242,"byte_end":19313,"line_start":247,"line_end":247,"column_start":5,"column_end":76}},{"value":"/ opposed to the `FixedHeapBuf`. This makes it a good fit when you have","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19318,"byte_end":19391,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/ unpredictable latency between two components, when you want to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19396,"byte_end":19462,"line_start":249,"line_end":249,"column_start":5,"column_end":71}},{"value":"/ amortize your allocation costs or when you are using an external","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19467,"byte_end":19535,"line_start":250,"line_end":250,"column_start":5,"column_end":73}},{"value":"/ back-pressure mechanism.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19540,"byte_end":19568,"line_start":251,"line_end":251,"column_start":5,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"channel","qualname":"::channel","value":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":2226},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1113}],"decl_id":null,"docs":" Asynchronous channels.","sig":null,"attributes":[{"value":"/ Asynchronous channels.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62172,"byte_end":62198,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62199,"byte_end":62202,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides various channels that can be used to communicate between","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62203,"byte_end":62284,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ asynchronous tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":62285,"byte_end":62308,"line_start":4,"line_end":4,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64313,"byte_end":64329,"line_start":8,"line_end":8,"column_start":12,"column_end":28},"name":"ChannelSendError","qualname":"::channel::error::ChannelSendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error which is returned when sending a value into a channel fails.","sig":null,"attributes":[{"value":"/ The error which is returned when sending a value into a channel fails.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":63998,"byte_end":64072,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64073,"byte_end":64076,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The `send` operation can only fail if the channel has been closed, which","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64077,"byte_end":64153,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ would prevent the other actors to ever retrieve the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64154,"byte_end":64216,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64217,"byte_end":64220,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The error recovers the value that has been sent.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64221,"byte_end":64273,"line_start":6,"line_end":6,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64333,"byte_end":64338,"line_start":8,"line_end":8,"column_start":32,"column_end":37},"name":"0","qualname":"::channel::error::ChannelSendError::0","value":"T","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1994},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64578,"byte_end":64583,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"Empty","qualname":"::channel::error::TryReceiveError::Empty","value":"TryReceiveError::Empty","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":" The channel is empty. No value is available for reception.\n","sig":null,"attributes":[{"value":"/ The channel is empty. No value is available for reception.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64511,"byte_end":64573,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64671,"byte_end":64677,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Closed","qualname":"::channel::error::TryReceiveError::Closed","value":"TryReceiveError::Closed","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":" The channel had been closed and no more value is available for reception.\n","sig":null,"attributes":[{"value":"/ The channel had been closed and no more value is available for reception.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64589,"byte_end":64666,"line_start":16,"line_end":16,"column_start":5,"column_end":82}}]},{"kind":"Enum","id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64489,"byte_end":64504,"line_start":13,"line_end":13,"column_start":10,"column_end":25},"name":"TryReceiveError","qualname":"::channel::error::TryReceiveError","value":"pub enum TryReceiveError {\n\n    /// The channel is empty. No value is available for reception.\n    Empty,\n\n    /// The channel had been closed and no more value is available for reception.\n    Closed,\n}","parent":null,"children":[{"krate":0,"index":1994},{"krate":0,"index":1996}],"decl_id":null,"docs":" The error which is returned when trying to receive from a channel\n without waiting fails.\n","sig":null,"attributes":[{"value":"/ The error which is returned when trying to receive from a channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64342,"byte_end":64411,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ without waiting fails.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64412,"byte_end":64438,"line_start":11,"line_end":11,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64774,"byte_end":64782,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<TryReceiveError>::is_empty","value":"pub fn is_empty(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the error is the `Empty` variant.\n","sig":null,"attributes":[{"value":"/ Returns whether the error is the `Empty` variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64709,"byte_end":64762,"line_start":21,"line_end":21,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64964,"byte_end":64973,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<TryReceiveError>::is_closed","value":"pub fn is_closed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the error is the `Closed` variant.\n","sig":null,"attributes":[{"value":"/ Returns whether the error is the `Closed` variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64898,"byte_end":64952,"line_start":29,"line_end":29,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2008},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65268,"byte_end":65272,"line_start":43,"line_end":43,"column_start":5,"column_end":9},"name":"Full","qualname":"::channel::error::TrySendError::Full","value":"TrySendError::Full(T)","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":" The channel is full.\n","sig":null,"attributes":[{"value":"/ The channel is full.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65239,"byte_end":65263,"line_start":42,"line_end":42,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2011},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65313,"byte_end":65319,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Closed","qualname":"::channel::error::TrySendError::Closed","value":"TrySendError::Closed(T)","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":" The channel was closed.\n","sig":null,"attributes":[{"value":"/ The channel was closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65281,"byte_end":65308,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65217,"byte_end":65229,"line_start":41,"line_end":41,"column_start":10,"column_end":22},"name":"TrySendError","qualname":"::channel::error::TrySendError","value":"pub enum TrySendError<T> {\n\n    /// The channel is full.\n    Full(T),\n\n    /// The channel was closed.\n    Closed(T),\n}","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2011}],"decl_id":null,"docs":" The error which is returned when trying to send on a channel\n without waiting fails.\n","sig":null,"attributes":[{"value":"/ The error which is returned when trying to send on a channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65088,"byte_end":65152,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/ without waiting fails.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65153,"byte_end":65179,"line_start":39,"line_end":39,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65413,"byte_end":65423,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrySendError<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Converts the error into its inner value.\n","sig":null,"attributes":[{"value":"/ Converts the error into its inner value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65357,"byte_end":65401,"line_start":49,"line_end":49,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65631,"byte_end":65638,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"is_full","qualname":"<TrySendError<T>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the error is the `WouldBlock` variant.\n","sig":null,"attributes":[{"value":"/ Returns whether the error is the `WouldBlock` variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65561,"byte_end":65619,"line_start":57,"line_end":57,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65823,"byte_end":65832,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<TrySendError<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the error is the `Closed` variant.\n","sig":null,"attributes":[{"value":"/ Returns whether the error is the `Closed` variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65757,"byte_end":65811,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2024},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66421,"byte_end":66432,"line_start":13,"line_end":13,"column_start":5,"column_end":16},"name":"NewlyClosed","qualname":"::channel::channel_future::CloseStatus::NewlyClosed","value":"CloseStatus::NewlyClosed","parent":{"krate":0,"index":2023},"children":[],"decl_id":null,"docs":" The channel has just been closed by the operation.\n","sig":null,"attributes":[{"value":"/ The channel has just been closed by the operation.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66362,"byte_end":66416,"line_start":12,"line_end":12,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2026},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66502,"byte_end":66515,"line_start":16,"line_end":16,"column_start":5,"column_end":18},"name":"AlreadyClosed","qualname":"::channel::channel_future::CloseStatus::AlreadyClosed","value":"CloseStatus::AlreadyClosed","parent":{"krate":0,"index":2023},"children":[],"decl_id":null,"docs":" The channel was already closed prior to the operation.\n","sig":null,"attributes":[{"value":"/ The channel was already closed prior to the operation.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66439,"byte_end":66497,"line_start":15,"line_end":15,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":2023},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66344,"byte_end":66355,"line_start":11,"line_end":11,"column_start":10,"column_end":21},"name":"CloseStatus","qualname":"::channel::channel_future::CloseStatus","value":"pub enum CloseStatus {\n\n    /// The channel has just been closed by the operation.\n    NewlyClosed,\n\n    /// The channel was already closed prior to the operation.\n    AlreadyClosed,\n}","parent":null,"children":[{"krate":0,"index":2024},{"krate":0,"index":2026}],"decl_id":null,"docs":" Conveys additional information regarding the status of a channel\n following a `close` operation.\n","sig":null,"attributes":[{"value":"/ Conveys additional information regarding the status of a channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66180,"byte_end":66248,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ following a `close` operation.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66249,"byte_end":66283,"line_start":9,"line_end":9,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66614,"byte_end":66629,"line_start":21,"line_end":21,"column_start":12,"column_end":27},"name":"is_newly_closed","qualname":"<CloseStatus>::is_newly_closed","value":"pub fn is_newly_closed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the value is the `NewlyClosed` variant.\n","sig":null,"attributes":[{"value":"/ Returns whether the value is the `NewlyClosed` variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66543,"byte_end":66602,"line_start":20,"line_end":20,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66824,"byte_end":66841,"line_start":29,"line_end":29,"column_start":12,"column_end":29},"name":"is_already_closed","qualname":"<CloseStatus>::is_already_closed","value":"pub fn is_already_closed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the value is the `AlreadyClosed` variant.\n","sig":null,"attributes":[{"value":"/ Returns whether the value is the `AlreadyClosed` variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66751,"byte_end":66812,"line_start":28,"line_end":28,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70406,"byte_end":70426,"line_start":150,"line_end":150,"column_start":12,"column_end":32},"name":"ChannelReceiveFuture","qualname":"::channel::channel_future::ChannelReceiveFuture","value":"ChannelReceiveFuture {  }","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"decl_id":null,"docs":" A Future that is returned by the `receive` function on a channel.\n The future gets resolved with `Some(value)` when a value could be\n received from the channel.\n If the channels gets closed and no items are still enqueued inside the\n channel, the future will resolve to `None`.\n","sig":null,"attributes":[{"value":"/ A Future that is returned by the `receive` function on a channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70052,"byte_end":70121,"line_start":144,"line_end":144,"column_start":1,"column_end":70}},{"value":"/ The future gets resolved with `Some(value)` when a value could be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70122,"byte_end":70191,"line_start":145,"line_end":145,"column_start":1,"column_end":70}},{"value":"/ received from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70192,"byte_end":70222,"line_start":146,"line_end":146,"column_start":1,"column_end":31}},{"value":"/ If the channels gets closed and no items are still enqueued inside the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70223,"byte_end":70297,"line_start":147,"line_end":147,"column_start":1,"column_end":75}},{"value":"/ channel, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70298,"byte_end":70345,"line_start":148,"line_end":148,"column_start":1,"column_end":48}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70346,"byte_end":70394,"line_start":149,"line_end":149,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73322,"byte_end":73339,"line_start":227,"line_end":227,"column_start":12,"column_end":29},"name":"ChannelSendFuture","qualname":"::channel::channel_future::ChannelSendFuture","value":"ChannelSendFuture {  }","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"decl_id":null,"docs":" A Future that is returned by the `send` function on a channel.\n The future gets resolved with `None` when a value could be\n written to the channel.\n If the channel gets closed the send operation will fail, and the\n Future will resolve to `ChannelSendError(T)` and return the item to send.\n","sig":null,"attributes":[{"value":"/ A Future that is returned by the `send` function on a channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":72957,"byte_end":73023,"line_start":221,"line_end":221,"column_start":1,"column_end":67}},{"value":"/ The future gets resolved with `None` when a value could be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73024,"byte_end":73086,"line_start":222,"line_end":222,"column_start":1,"column_end":63}},{"value":"/ written to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73087,"byte_end":73114,"line_start":223,"line_end":223,"column_start":1,"column_end":28}},{"value":"/ If the channel gets closed the send operation will fail, and the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73115,"byte_end":73183,"line_start":224,"line_end":224,"column_start":1,"column_end":69}},{"value":"/ Future will resolve to `ChannelSendError(T)` and return the item to send.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73184,"byte_end":73261,"line_start":225,"line_end":225,"column_start":1,"column_end":78}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73262,"byte_end":73310,"line_start":226,"line_end":226,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":74292,"byte_end":74298,"line_start":254,"line_end":254,"column_start":12,"column_end":18},"name":"cancel","qualname":"<ChannelSendFuture>::cancel","value":"pub fn cancel(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Tries to cancel the ongoing send operation\n","sig":null,"attributes":[{"value":"/ Tries to cancel the ongoing send operation","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":74234,"byte_end":74280,"line_start":253,"line_end":253,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":77212,"byte_end":77232,"line_start":336,"line_end":336,"column_start":20,"column_end":40},"name":"ChannelReceiveFuture","qualname":"::channel::channel_future::if_alloc::shared::ChannelReceiveFuture","value":"ChannelReceiveFuture {  }","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" A Future that is returned by the `receive` function on a channel.\n The future gets resolved with `Some(value)` when a value could be\n received from the channel.\n If the channels gets closed and no items are still enqueued inside the\n channel, the future will resolve to `None`.\n","sig":null,"attributes":[{"value":"/ A Future that is returned by the `receive` function on a channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76810,"byte_end":76879,"line_start":330,"line_end":330,"column_start":9,"column_end":78}},{"value":"/ The future gets resolved with `Some(value)` when a value could be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76888,"byte_end":76957,"line_start":331,"line_end":331,"column_start":9,"column_end":78}},{"value":"/ received from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76966,"byte_end":76996,"line_start":332,"line_end":332,"column_start":9,"column_end":39}},{"value":"/ If the channels gets closed and no items are still enqueued inside the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":77005,"byte_end":77079,"line_start":333,"line_end":333,"column_start":9,"column_end":83}},{"value":"/ channel, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":77088,"byte_end":77135,"line_start":334,"line_end":334,"column_start":9,"column_end":56}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":77144,"byte_end":77192,"line_start":335,"line_end":335,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80796,"byte_end":80813,"line_start":420,"line_end":420,"column_start":20,"column_end":37},"name":"ChannelSendFuture","qualname":"::channel::channel_future::if_alloc::shared::ChannelSendFuture","value":"ChannelSendFuture {  }","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"decl_id":null,"docs":" A Future that is returned by the `send` function on a channel.\n The future gets resolved with `None` when a value could be\n written to the channel.\n If the channel gets closed the send operation will fail, and the\n Future will resolve to `ChannelSendError(T)` and return the item\n to send.\n","sig":null,"attributes":[{"value":"/ A Future that is returned by the `send` function on a channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80371,"byte_end":80437,"line_start":413,"line_end":413,"column_start":9,"column_end":75}},{"value":"/ The future gets resolved with `None` when a value could be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80446,"byte_end":80508,"line_start":414,"line_end":414,"column_start":9,"column_end":71}},{"value":"/ written to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80517,"byte_end":80544,"line_start":415,"line_end":415,"column_start":9,"column_end":36}},{"value":"/ If the channel gets closed the send operation will fail, and the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80553,"byte_end":80621,"line_start":416,"line_end":416,"column_start":9,"column_end":77}},{"value":"/ Future will resolve to `ChannelSendError(T)` and return the item","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80630,"byte_end":80698,"line_start":417,"line_end":417,"column_start":9,"column_end":77}},{"value":"/ to send.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80707,"byte_end":80719,"line_start":418,"line_end":418,"column_start":9,"column_end":21}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":80728,"byte_end":80776,"line_start":419,"line_end":419,"column_start":9,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":81370,"byte_end":81376,"line_start":432,"line_end":432,"column_start":20,"column_end":26},"name":"cancel","qualname":"<ChannelSendFuture<MutexType, T>>::cancel","value":"pub fn cancel(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Tries to cancel the ongoing send operation\n","sig":null,"attributes":[{"value":"/ Tries to cancel the ongoing send operation","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":81304,"byte_end":81350,"line_start":431,"line_end":431,"column_start":13,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90541,"byte_end":90562,"line_start":148,"line_end":148,"column_start":12,"column_end":33},"name":"GenericOneshotChannel","qualname":"::channel::oneshot::GenericOneshotChannel","value":"GenericOneshotChannel {  }","parent":null,"children":[{"krate":0,"index":417}],"decl_id":null,"docs":" A channel which can be used to exchange a single value between two\n concurrent tasks.","sig":null,"attributes":[{"value":"/ A channel which can be used to exchange a single value between two","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90087,"byte_end":90157,"line_start":139,"line_end":139,"column_start":1,"column_end":71}},{"value":"/ concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90158,"byte_end":90179,"line_start":140,"line_end":140,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90180,"byte_end":90183,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Tasks can wait for the value to get delivered via `receive`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90184,"byte_end":90248,"line_start":142,"line_end":142,"column_start":1,"column_end":65}},{"value":"/ The returned Future will get fulfilled when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90249,"byte_end":90330,"line_start":143,"line_end":143,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90331,"byte_end":90334,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The value can only be extracted by a single receiving task. Once the value","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90335,"byte_end":90413,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ has been retrieved from the Channel, the Channel is closed and subsequent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90414,"byte_end":90491,"line_start":146,"line_end":146,"column_start":1,"column_end":78}},{"value":"/ receive calls will return `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90492,"byte_end":90529,"line_start":147,"line_end":147,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91401,"byte_end":91404,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericOneshotChannel<MutexType, T>>::new","value":"pub fn new() -> GenericOneshotChannel<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new OneshotChannel in the given state\n","sig":null,"attributes":[{"value":"/ Creates a new OneshotChannel in the given state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91338,"byte_end":91389,"line_start":173,"line_end":173,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91858,"byte_end":91862,"line_start":186,"line_end":186,"column_start":12,"column_end":16},"name":"send","qualname":"<GenericOneshotChannel<MutexType, T>>::send","value":"pub fn send(&Self, T) -> Result<(), ChannelSendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single value to the channel.","sig":null,"attributes":[{"value":"/ Writes a single value to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91553,"byte_end":91594,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91599,"byte_end":91602,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This will notify waiters about the availability of the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91607,"byte_end":91672,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/ If a value had been written to the channel before, or if the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91677,"byte_end":91741,"line_start":183,"line_end":183,"column_start":5,"column_end":69}},{"value":"/ channel is closed, the new value will be rejected and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91746,"byte_end":91803,"line_start":184,"line_end":184,"column_start":5,"column_end":62}},{"value":"/ returned inside the error variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91808,"byte_end":91846,"line_start":185,"line_end":185,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92211,"byte_end":92216,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"close","qualname":"<GenericOneshotChannel<MutexType, T>>::close","value":"pub fn close(&Self) -> CloseStatus","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91966,"byte_end":91989,"line_start":190,"line_end":190,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91994,"byte_end":91997,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ This will notify waiters about closure, by fulfilling pending `Future`s","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92002,"byte_end":92077,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ with `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92082,"byte_end":92098,"line_start":193,"line_end":193,"column_start":5,"column_end":21}},{"value":"/ `send(value)` attempts which follow this call will fail with a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92103,"byte_end":92169,"line_start":194,"line_end":194,"column_start":5,"column_end":71}},{"value":"/ [`ChannelSendError`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92174,"byte_end":92199,"line_start":195,"line_end":195,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92411,"byte_end":92418,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"receive","qualname":"<GenericOneshotChannel<MutexType, T>>::receive","value":"pub fn receive(&Self) -> ChannelReceiveFuture<, MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel\n or the channel is closed.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92286,"byte_end":92365,"line_start":200,"line_end":200,"column_start":5,"column_end":84}},{"value":"/ or the channel is closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92370,"byte_end":92399,"line_start":201,"line_end":201,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":93255,"byte_end":93274,"line_start":233,"line_end":233,"column_start":10,"column_end":29},"name":"LocalOneshotChannel","qualname":"::channel::oneshot::LocalOneshotChannel","value":"GenericOneshotChannel<NoopLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotChannel`] which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotChannel`] which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":93188,"byte_end":93245,"line_start":232,"line_end":232,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":93533,"byte_end":93547,"line_start":242,"line_end":242,"column_start":14,"column_end":28},"name":"OneshotChannel","qualname":"::channel::oneshot::if_alloc::OneshotChannel","value":"GenericOneshotChannel<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotChannel`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotChannel`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":93446,"byte_end":93519,"line_start":241,"line_end":241,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94953,"byte_end":94973,"line_start":284,"line_end":284,"column_start":20,"column_end":40},"name":"GenericOneshotSender","qualname":"::channel::oneshot::if_alloc::shared::GenericOneshotSender","value":"GenericOneshotSender {  }","parent":null,"children":[{"krate":0,"index":461}],"decl_id":null,"docs":" The sending side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The sending side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94749,"byte_end":94819,"line_start":280,"line_end":280,"column_start":9,"column_end":79}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94828,"byte_end":94857,"line_start":281,"line_end":281,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94866,"byte_end":94869,"line_start":282,"line_end":282,"column_start":9,"column_end":12}},{"value":"/ Values can be sent into the channel through `send`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94878,"byte_end":94933,"line_start":283,"line_end":283,"column_start":9,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95519,"byte_end":95541,"line_start":299,"line_end":299,"column_start":20,"column_end":42},"name":"GenericOneshotReceiver","qualname":"::channel::oneshot::if_alloc::shared::GenericOneshotReceiver","value":"GenericOneshotReceiver {  }","parent":null,"children":[{"krate":0,"index":465}],"decl_id":null,"docs":" The receiving side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The receiving side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95204,"byte_end":95276,"line_start":294,"line_end":294,"column_start":9,"column_end":81}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95285,"byte_end":95314,"line_start":295,"line_end":295,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95323,"byte_end":95326,"line_start":296,"line_end":296,"column_start":9,"column_end":12}},{"value":"/ Tasks can receive values from the channel through the `receive` method.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95335,"byte_end":95410,"line_start":297,"line_end":297,"column_start":9,"column_end":84}},{"value":"/ The returned Future will get resolved when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95419,"byte_end":95499,"line_start":298,"line_end":298,"column_start":9,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97776,"byte_end":97799,"line_start":363,"line_end":363,"column_start":16,"column_end":39},"name":"generic_oneshot_channel","qualname":"::channel::oneshot::if_alloc::shared::generic_oneshot_channel","value":"pub fn generic_oneshot_channel<MutexType, T>()\n-> (GenericOneshotSender<MutexType, T>, GenericOneshotReceiver<MutexType, T>)\nwhere MutexType: RawMutex, T: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new oneshot channel which can be used to exchange values\n of type `T` between concurrent tasks.\n The ends of the Channel are represented through\n the returned Sender and Receiver.","sig":null,"attributes":[{"value":"/ Creates a new oneshot channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97146,"byte_end":97216,"line_start":349,"line_end":349,"column_start":9,"column_end":79}},{"value":"/ of type `T` between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97225,"byte_end":97266,"line_start":350,"line_end":350,"column_start":9,"column_end":50}},{"value":"/ The ends of the Channel are represented through","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97275,"byte_end":97326,"line_start":351,"line_end":351,"column_start":9,"column_end":60}},{"value":"/ the returned Sender and Receiver.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97335,"byte_end":97372,"line_start":352,"line_end":352,"column_start":9,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97381,"byte_end":97384,"line_start":353,"line_end":353,"column_start":9,"column_end":12}},{"value":"/ As soon es either the senders or receivers is closed, the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97393,"byte_end":97462,"line_start":354,"line_end":354,"column_start":9,"column_end":78}},{"value":"/ itself will be closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97471,"byte_end":97497,"line_start":355,"line_end":355,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97506,"byte_end":97509,"line_start":356,"line_end":356,"column_start":9,"column_end":12}},{"value":"/ Example for creating a channel to transmit an integer value:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97518,"byte_end":97582,"line_start":357,"line_end":357,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97591,"byte_end":97594,"line_start":358,"line_end":358,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97603,"byte_end":97610,"line_start":359,"line_end":359,"column_start":9,"column_end":16}},{"value":"/ # use futures_intrusive::channel::shared::oneshot_channel;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97619,"byte_end":97681,"line_start":360,"line_end":360,"column_start":9,"column_end":71}},{"value":"/ let (sender, receiver) = oneshot_channel::<i32>();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97690,"byte_end":97744,"line_start":361,"line_end":361,"column_start":9,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":97753,"byte_end":97760,"line_start":362,"line_end":362,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98883,"byte_end":98887,"line_start":394,"line_end":394,"column_start":20,"column_end":24},"name":"send","qualname":"<GenericOneshotSender<MutexType, T>>::send","value":"pub fn send(&Self, T) -> Result<(), ChannelSendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single value to the channel.","sig":null,"attributes":[{"value":"/ Writes a single value to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98530,"byte_end":98571,"line_start":388,"line_end":388,"column_start":13,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98584,"byte_end":98587,"line_start":389,"line_end":389,"column_start":13,"column_end":16}},{"value":"/ This will notify waiters about the availability of the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98600,"byte_end":98665,"line_start":390,"line_end":390,"column_start":13,"column_end":78}},{"value":"/ If a value had been written to the channel before, or if the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98678,"byte_end":98742,"line_start":391,"line_end":391,"column_start":13,"column_end":77}},{"value":"/ channel is closed, the new value will be rejected and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98755,"byte_end":98812,"line_start":392,"line_end":392,"column_start":13,"column_end":70}},{"value":"/ returned inside the error variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98825,"byte_end":98863,"line_start":393,"line_end":393,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99337,"byte_end":99344,"line_start":405,"line_end":405,"column_start":20,"column_end":27},"name":"receive","qualname":"<GenericOneshotReceiver<MutexType, T>>::receive","value":"pub fn receive(&Self) -> ChannelReceiveFuture<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel.\n If the channels gets closed, the future will resolve to `None`.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99157,"byte_end":99237,"line_start":403,"line_end":403,"column_start":13,"column_end":93}},{"value":"/ If the channels gets closed, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99250,"byte_end":99317,"line_start":404,"line_end":404,"column_start":13,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99901,"byte_end":99914,"line_start":420,"line_end":420,"column_start":22,"column_end":35},"name":"OneshotSender","qualname":"::channel::oneshot::if_alloc::shared::if_alloc::OneshotSender","value":"GenericOneshotSender<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotSender`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotSender`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99807,"byte_end":99879,"line_start":419,"line_end":419,"column_start":13,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":100092,"byte_end":100107,"line_start":423,"line_end":423,"column_start":22,"column_end":37},"name":"OneshotReceiver","qualname":"::channel::oneshot::if_alloc::shared::if_alloc::OneshotReceiver","value":"GenericOneshotReceiver<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotReceiver`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotReceiver`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99996,"byte_end":100070,"line_start":422,"line_end":422,"column_start":13,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":100328,"byte_end":100343,"line_start":429,"line_end":429,"column_start":20,"column_end":35},"name":"oneshot_channel","qualname":"::channel::oneshot::if_alloc::shared::if_alloc::oneshot_channel","value":"pub fn oneshot_channel<T>() -> (OneshotSender<T>, OneshotReceiver<T>) where\nT: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new oneshot channel.","sig":null,"attributes":[{"value":"/ Creates a new oneshot channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":100192,"byte_end":100226,"line_start":426,"line_end":426,"column_start":13,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":100239,"byte_end":100242,"line_start":427,"line_end":427,"column_start":13,"column_end":16}},{"value":"/ Refer to [`generic_oneshot_channel`] for details.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":100255,"byte_end":100308,"line_start":428,"line_end":428,"column_start":13,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106436,"byte_end":106466,"line_start":152,"line_end":152,"column_start":12,"column_end":42},"name":"GenericOneshotBroadcastChannel","qualname":"::channel::oneshot_broadcast::GenericOneshotBroadcastChannel","value":"GenericOneshotBroadcastChannel {  }","parent":null,"children":[{"krate":0,"index":545}],"decl_id":null,"docs":" A channel which can be used to exchange a single value between two or more\n concurrent tasks.","sig":null,"attributes":[{"value":"/ A channel which can be used to exchange a single value between two or more","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106034,"byte_end":106112,"line_start":144,"line_end":144,"column_start":1,"column_end":79}},{"value":"/ concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106113,"byte_end":106134,"line_start":145,"line_end":145,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106135,"byte_end":106138,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ The value which gets sent will get stored inside the Channel, and can be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106139,"byte_end":106215,"line_start":147,"line_end":147,"column_start":1,"column_end":77}},{"value":"/ retrieved by an arbitrary number of tasks afterwards.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106216,"byte_end":106273,"line_start":148,"line_end":148,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106274,"byte_end":106277,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ Tasks can wait for the value to get delivered via `receive`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106278,"byte_end":106342,"line_start":150,"line_end":150,"column_start":1,"column_end":65}},{"value":"/ The returned Future will get fulfilled when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106343,"byte_end":106424,"line_start":151,"line_end":151,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107379,"byte_end":107382,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericOneshotBroadcastChannel<MutexType, T>>::new","value":"pub fn new() -> GenericOneshotBroadcastChannel<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new OneshotBroadcastChannel in the given state\n","sig":null,"attributes":[{"value":"/ Creates a new OneshotBroadcastChannel in the given state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107307,"byte_end":107367,"line_start":180,"line_end":180,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107854,"byte_end":107858,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"send","qualname":"<GenericOneshotBroadcastChannel<MutexType, T>>::send","value":"pub fn send(&Self, T) -> Result<(), ChannelSendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single value to the channel.","sig":null,"attributes":[{"value":"/ Writes a single value to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107549,"byte_end":107590,"line_start":187,"line_end":187,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107595,"byte_end":107598,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ This will notify waiters about the availability of the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107603,"byte_end":107668,"line_start":189,"line_end":189,"column_start":5,"column_end":70}},{"value":"/ If a value had been written to the channel before, or if the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107673,"byte_end":107737,"line_start":190,"line_end":190,"column_start":5,"column_end":69}},{"value":"/ channel is closed, the new value will be rejected and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107742,"byte_end":107799,"line_start":191,"line_end":191,"column_start":5,"column_end":62}},{"value":"/ returned inside the error variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107804,"byte_end":107842,"line_start":192,"line_end":192,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108207,"byte_end":108212,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"close","qualname":"<GenericOneshotBroadcastChannel<MutexType, T>>::close","value":"pub fn close(&Self) -> CloseStatus","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107962,"byte_end":107985,"line_start":197,"line_end":197,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107990,"byte_end":107993,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This will notify waiters about closure, by fulfilling pending `Future`s","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107998,"byte_end":108073,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ with `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108078,"byte_end":108094,"line_start":200,"line_end":200,"column_start":5,"column_end":21}},{"value":"/ `send(value)` attempts which follow this call will fail with a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108099,"byte_end":108165,"line_start":201,"line_end":201,"column_start":5,"column_end":71}},{"value":"/ [`ChannelSendError`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108170,"byte_end":108195,"line_start":202,"line_end":202,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108407,"byte_end":108414,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"receive","qualname":"<GenericOneshotBroadcastChannel<MutexType, T>>::receive","value":"pub fn receive(&Self) -> ChannelReceiveFuture<, MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel\n or the channel is closed.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108282,"byte_end":108361,"line_start":207,"line_end":207,"column_start":5,"column_end":84}},{"value":"/ or the channel is closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108366,"byte_end":108395,"line_start":208,"line_end":208,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":109289,"byte_end":109317,"line_start":242,"line_end":242,"column_start":10,"column_end":38},"name":"LocalOneshotBroadcastChannel","qualname":"::channel::oneshot_broadcast::LocalOneshotBroadcastChannel","value":"GenericOneshotBroadcastChannel<NoopLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotBroadcastChannel`] which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotBroadcastChannel`] which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":109213,"byte_end":109279,"line_start":241,"line_end":241,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":109598,"byte_end":109621,"line_start":252,"line_end":252,"column_start":14,"column_end":37},"name":"OneshotBroadcastChannel","qualname":"::channel::oneshot_broadcast::if_alloc::OneshotBroadcastChannel","value":"GenericOneshotBroadcastChannel<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotBroadcastChannel`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotBroadcastChannel`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":109502,"byte_end":109584,"line_start":251,"line_end":251,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111067,"byte_end":111096,"line_start":295,"line_end":295,"column_start":20,"column_end":49},"name":"GenericOneshotBroadcastSender","qualname":"::channel::oneshot_broadcast::if_alloc::shared::GenericOneshotBroadcastSender","value":"GenericOneshotBroadcastSender {  }","parent":null,"children":[{"krate":0,"index":589}],"decl_id":null,"docs":" The sending side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The sending side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":110863,"byte_end":110933,"line_start":291,"line_end":291,"column_start":9,"column_end":79}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":110942,"byte_end":110971,"line_start":292,"line_end":292,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":110980,"byte_end":110983,"line_start":293,"line_end":293,"column_start":9,"column_end":12}},{"value":"/ Values can be sent into the channel through `send`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":110992,"byte_end":111047,"line_start":294,"line_end":294,"column_start":9,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111650,"byte_end":111681,"line_start":310,"line_end":310,"column_start":20,"column_end":51},"name":"GenericOneshotBroadcastReceiver","qualname":"::channel::oneshot_broadcast::if_alloc::shared::GenericOneshotBroadcastReceiver","value":"GenericOneshotBroadcastReceiver {  }","parent":null,"children":[{"krate":0,"index":593}],"decl_id":null,"docs":" The receiving side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The receiving side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111335,"byte_end":111407,"line_start":305,"line_end":305,"column_start":9,"column_end":81}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111416,"byte_end":111445,"line_start":306,"line_end":306,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111454,"byte_end":111457,"line_start":307,"line_end":307,"column_start":9,"column_end":12}},{"value":"/ Tasks can receive values from the channel through the `receive` method.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111466,"byte_end":111541,"line_start":308,"line_end":308,"column_start":9,"column_end":84}},{"value":"/ The returned Future will get resolved when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":111550,"byte_end":111630,"line_start":309,"line_end":309,"column_start":9,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114773,"byte_end":114806,"line_start":396,"line_end":396,"column_start":16,"column_end":49},"name":"generic_oneshot_broadcast_channel","qualname":"::channel::oneshot_broadcast::if_alloc::shared::generic_oneshot_broadcast_channel","value":"pub fn generic_oneshot_broadcast_channel<MutexType, T>()\n->\n    (GenericOneshotBroadcastSender<MutexType, T>,\n     GenericOneshotBroadcastReceiver<MutexType, T>) where MutexType: RawMutex,\nT: Send + Clone","parent":null,"children":[],"decl_id":null,"docs":" Creates a new oneshot broadcast channel which can be used to exchange values\n of type `T` between concurrent tasks.\n The ends of the Channel are represented through\n the returned `Sender` and `Receiver`. The `Receiver` can be cloned.","sig":null,"attributes":[{"value":"/ Creates a new oneshot broadcast channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114075,"byte_end":114155,"line_start":382,"line_end":382,"column_start":9,"column_end":89}},{"value":"/ of type `T` between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114164,"byte_end":114205,"line_start":383,"line_end":383,"column_start":9,"column_end":50}},{"value":"/ The ends of the Channel are represented through","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114214,"byte_end":114265,"line_start":384,"line_end":384,"column_start":9,"column_end":60}},{"value":"/ the returned `Sender` and `Receiver`. The `Receiver` can be cloned.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114274,"byte_end":114345,"line_start":385,"line_end":385,"column_start":9,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114354,"byte_end":114357,"line_start":386,"line_end":386,"column_start":9,"column_end":12}},{"value":"/ As soon es either the senders or all receivers is closed, the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114366,"byte_end":114439,"line_start":387,"line_end":387,"column_start":9,"column_end":82}},{"value":"/ itself will be closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114448,"byte_end":114474,"line_start":388,"line_end":388,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114483,"byte_end":114486,"line_start":389,"line_end":389,"column_start":9,"column_end":12}},{"value":"/ Example for creating a channel to transmit an integer value:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114495,"byte_end":114559,"line_start":390,"line_end":390,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114568,"byte_end":114571,"line_start":391,"line_end":391,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114580,"byte_end":114587,"line_start":392,"line_end":392,"column_start":9,"column_end":16}},{"value":"/ # use futures_intrusive::channel::shared::oneshot_broadcast_channel;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114596,"byte_end":114668,"line_start":393,"line_end":393,"column_start":9,"column_end":81}},{"value":"/ let (sender, receiver) = oneshot_broadcast_channel::<i32>();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114677,"byte_end":114741,"line_start":394,"line_end":394,"column_start":9,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":114750,"byte_end":114757,"line_start":395,"line_end":395,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115974,"byte_end":115978,"line_start":428,"line_end":428,"column_start":20,"column_end":24},"name":"send","qualname":"<GenericOneshotBroadcastSender<MutexType, T>>::send","value":"pub fn send(&Self, T) -> Result<(), ChannelSendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single value to the channel.","sig":null,"attributes":[{"value":"/ Writes a single value to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115621,"byte_end":115662,"line_start":422,"line_end":422,"column_start":13,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115675,"byte_end":115678,"line_start":423,"line_end":423,"column_start":13,"column_end":16}},{"value":"/ This will notify waiters about the availability of the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115691,"byte_end":115756,"line_start":424,"line_end":424,"column_start":13,"column_end":78}},{"value":"/ If a value had been written to the channel before, or if the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115769,"byte_end":115833,"line_start":425,"line_end":425,"column_start":13,"column_end":77}},{"value":"/ channel is closed, the new value will be rejected and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115846,"byte_end":115903,"line_start":426,"line_end":426,"column_start":13,"column_end":70}},{"value":"/ returned inside the error variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115916,"byte_end":115954,"line_start":427,"line_end":427,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":116459,"byte_end":116466,"line_start":440,"line_end":440,"column_start":20,"column_end":27},"name":"receive","qualname":"<GenericOneshotBroadcastReceiver<MutexType, T>>::receive","value":"pub fn receive(&Self) -> ChannelReceiveFuture<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel.\n If the channels gets closed, the future will resolve to `None`.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":116279,"byte_end":116359,"line_start":438,"line_end":438,"column_start":13,"column_end":93}},{"value":"/ If the channels gets closed, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":116372,"byte_end":116439,"line_start":439,"line_end":439,"column_start":13,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117032,"byte_end":117054,"line_start":455,"line_end":455,"column_start":22,"column_end":44},"name":"OneshotBroadcastSender","qualname":"::channel::oneshot_broadcast::if_alloc::shared::if_alloc::OneshotBroadcastSender","value":"GenericOneshotBroadcastSender<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotBroadcastSender`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotBroadcastSender`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":116929,"byte_end":117010,"line_start":454,"line_end":454,"column_start":13,"column_end":94}}]},{"kind":"Type","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117250,"byte_end":117274,"line_start":458,"line_end":458,"column_start":22,"column_end":46},"name":"OneshotBroadcastReceiver","qualname":"::channel::oneshot_broadcast::if_alloc::shared::if_alloc::OneshotBroadcastReceiver","value":"GenericOneshotBroadcastReceiver<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericOneshotBroadcastReceiver`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericOneshotBroadcastReceiver`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117145,"byte_end":117228,"line_start":457,"line_end":457,"column_start":13,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117524,"byte_end":117549,"line_start":464,"line_end":464,"column_start":20,"column_end":45},"name":"oneshot_broadcast_channel","qualname":"::channel::oneshot_broadcast::if_alloc::shared::if_alloc::oneshot_broadcast_channel","value":"pub fn oneshot_broadcast_channel<T>()\n-> (OneshotBroadcastSender<T>, OneshotBroadcastReceiver<T>) where T: Send +\nClone","parent":null,"children":[],"decl_id":null,"docs":" Creates a new oneshot broadcast channel.","sig":null,"attributes":[{"value":"/ Creates a new oneshot broadcast channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117368,"byte_end":117412,"line_start":461,"line_end":461,"column_start":13,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117425,"byte_end":117428,"line_start":462,"line_end":462,"column_start":13,"column_end":16}},{"value":"/ Refer to [`generic_oneshot_broadcast_channel`] for details.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":117441,"byte_end":117504,"line_start":463,"line_end":463,"column_start":13,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118592,"byte_end":118599,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"StateId","qualname":"::channel::state_broadcast::StateId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An ID, which allows to differentiate states received from a Channel.\n Elements with a bigger state ID (`id > otherId`) have been published more\n recently into the Channel.\n","sig":null,"attributes":[{"value":"/ An ID, which allows to differentiate states received from a Channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118328,"byte_end":118400,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ Elements with a bigger state ID (`id > otherId`) have been published more","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118401,"byte_end":118478,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ recently into the Channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118479,"byte_end":118509,"line_start":19,"line_end":19,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118745,"byte_end":118748,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<StateId>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial StateId, which is guaranteed to return the\n oldest buffered value available.\n","sig":null,"attributes":[{"value":"/ Returns the initial StateId, which is guaranteed to return the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118626,"byte_end":118692,"line_start":24,"line_end":24,"column_start":5,"column_end":71}},{"value":"/ oldest buffered value available.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118697,"byte_end":118733,"line_start":25,"line_end":25,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120737,"byte_end":120755,"line_start":90,"line_end":90,"column_start":12,"column_end":30},"name":"StateReceiveFuture","qualname":"::channel::state_broadcast::StateReceiveFuture","value":"StateReceiveFuture {  }","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"decl_id":null,"docs":" A Future that is returned by the `receive` function on a state broadcast channel.\n The future gets resolved with `Some((state_id, state))` when a value could be\n received from the channel.","sig":null,"attributes":[{"value":"/ A Future that is returned by the `receive` function on a state broadcast channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120124,"byte_end":120209,"line_start":78,"line_end":78,"column_start":1,"column_end":86}},{"value":"/ The future gets resolved with `Some((state_id, state))` when a value could be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120210,"byte_end":120291,"line_start":79,"line_end":79,"column_start":1,"column_end":82}},{"value":"/ received from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120292,"byte_end":120322,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120323,"byte_end":120326,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ `state` represents the new state which had been retrieved from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120327,"byte_end":120406,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120407,"byte_end":120410,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ `state_id` is the [`StateId`] which can be passed as a parameter to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120411,"byte_end":120482,"line_start":84,"line_end":84,"column_start":1,"column_end":72}},{"value":"/ `receive()` in order to fetch the next state from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120483,"byte_end":120549,"line_start":85,"line_end":85,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120550,"byte_end":120553,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ If the channels gets closed and no items are still enqueued inside the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120554,"byte_end":120628,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/ channel, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120629,"byte_end":120676,"line_start":88,"line_end":88,"column_start":1,"column_end":48}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":120677,"byte_end":120725,"line_start":89,"line_end":89,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129062,"byte_end":129090,"line_start":320,"line_end":320,"column_start":12,"column_end":40},"name":"GenericStateBroadcastChannel","qualname":"::channel::state_broadcast::GenericStateBroadcastChannel","value":"GenericStateBroadcastChannel {  }","parent":null,"children":[{"krate":0,"index":721}],"decl_id":null,"docs":" A channel which can be used to synchronize the state between a sender an\n arbitrary number of receivers.","sig":null,"attributes":[{"value":"/ A channel which can be used to synchronize the state between a sender an","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":128777,"byte_end":128853,"line_start":313,"line_end":313,"column_start":1,"column_end":77}},{"value":"/ arbitrary number of receivers.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":128854,"byte_end":128888,"line_start":314,"line_end":314,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":128889,"byte_end":128892,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ The sender can publish its state.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":128893,"byte_end":128930,"line_start":316,"line_end":316,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":128931,"byte_end":128934,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ The receivers can wait for state updates by announcing the most recent state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":128935,"byte_end":129015,"line_start":318,"line_end":318,"column_start":1,"column_end":81}},{"value":"/ that is already known to them.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129016,"byte_end":129050,"line_start":319,"line_end":319,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129993,"byte_end":129996,"line_start":349,"line_end":349,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericStateBroadcastChannel<MutexType, T>>::new","value":"pub fn new() -> GenericStateBroadcastChannel<MutexType, T> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Creates a new State Broadcast Channel in the given state\n","sig":null,"attributes":[{"value":"/ Creates a new State Broadcast Channel in the given state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129921,"byte_end":129981,"line_start":348,"line_end":348,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130510,"byte_end":130514,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"send","qualname":"<GenericStateBroadcastChannel<MutexType, T>>::send","value":"pub fn send(&Self, T) -> Result<(), ChannelSendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single value to the channel.","sig":null,"attributes":[{"value":"/ Writes a single value to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130191,"byte_end":130232,"line_start":358,"line_end":358,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130237,"byte_end":130240,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ This will notify waiters about the availability of the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130245,"byte_end":130310,"line_start":360,"line_end":360,"column_start":5,"column_end":70}},{"value":"/ If the maximum amount of values had been written to the channel,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130315,"byte_end":130383,"line_start":361,"line_end":361,"column_start":5,"column_end":73}},{"value":"/ or if the channel is closed, the new value will be rejected and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130388,"byte_end":130455,"line_start":362,"line_end":362,"column_start":5,"column_end":72}},{"value":"/ returned inside the error variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130460,"byte_end":130498,"line_start":363,"line_end":363,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130863,"byte_end":130868,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"close","qualname":"<GenericStateBroadcastChannel<MutexType, T>>::close","value":"pub fn close(&Self) -> CloseStatus","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130618,"byte_end":130641,"line_start":368,"line_end":368,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130646,"byte_end":130649,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This will notify waiters about closure, by fulfilling pending `Future`s","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130654,"byte_end":130729,"line_start":370,"line_end":370,"column_start":5,"column_end":80}},{"value":"/ with `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130734,"byte_end":130750,"line_start":371,"line_end":371,"column_start":5,"column_end":21}},{"value":"/ `send(value)` attempts which follow this call will fail with a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130755,"byte_end":130821,"line_start":372,"line_end":372,"column_start":5,"column_end":71}},{"value":"/ [`ChannelSendError`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130826,"byte_end":130851,"line_start":373,"line_end":373,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131364,"byte_end":131371,"line_start":386,"line_end":386,"column_start":12,"column_end":19},"name":"receive","qualname":"<GenericStateBroadcastChannel<MutexType, T>>::receive","value":"pub fn receive(&Self, StateId) -> StateReceiveFuture<, MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel\n or the channel is closed.\n `state_id` specifies the minimum state ID that should be retrieved\n by the `receive` operation.","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":130938,"byte_end":131017,"line_start":378,"line_end":378,"column_start":5,"column_end":84}},{"value":"/ or the channel is closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131022,"byte_end":131051,"line_start":379,"line_end":379,"column_start":5,"column_end":34}},{"value":"/ `state_id` specifies the minimum state ID that should be retrieved","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131056,"byte_end":131126,"line_start":380,"line_end":380,"column_start":5,"column_end":75}},{"value":"/ by the `receive` operation.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131131,"byte_end":131162,"line_start":381,"line_end":381,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131167,"byte_end":131170,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ The returned [`StateReceiveFuture`] will get fulfilled with the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131175,"byte_end":131242,"line_start":383,"line_end":383,"column_start":5,"column_end":72}},{"value":"/ retrieved value as well as the [`StateId`] which is required to retrieve","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131247,"byte_end":131323,"line_start":384,"line_end":384,"column_start":5,"column_end":81}},{"value":"/ the following state.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131328,"byte_end":131352,"line_start":385,"line_end":385,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131898,"byte_end":131909,"line_start":401,"line_end":401,"column_start":12,"column_end":23},"name":"try_receive","qualname":"<GenericStateBroadcastChannel<MutexType, T>>::try_receive","value":"pub fn try_receive(&Self, StateId) -> Option<(StateId, T)>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to retrieve a value whose `StateId` is greater than the one provided.","sig":null,"attributes":[{"value":"/ Attempt to retrieve a value whose `StateId` is greater than the one provided.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131650,"byte_end":131731,"line_start":397,"line_end":397,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131736,"byte_end":131739,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if no value is found in the channel, or if the current `StateId`","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131744,"byte_end":131827,"line_start":399,"line_end":399,"column_start":5,"column_end":88}},{"value":"/ of the value is less or equal to the one provided.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":131832,"byte_end":131886,"line_start":400,"line_end":400,"column_start":5,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":132665,"byte_end":132691,"line_start":428,"line_end":428,"column_start":10,"column_end":36},"name":"LocalStateBroadcastChannel","qualname":"::channel::state_broadcast::LocalStateBroadcastChannel","value":"GenericStateBroadcastChannel<NoopLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericStateBroadcastChannel`] which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericStateBroadcastChannel`] which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":132591,"byte_end":132655,"line_start":427,"line_end":427,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":132968,"byte_end":132989,"line_start":438,"line_end":438,"column_start":14,"column_end":35},"name":"StateBroadcastChannel","qualname":"::channel::state_broadcast::if_alloc::StateBroadcastChannel","value":"GenericStateBroadcastChannel<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericStateBroadcastChannel`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericStateBroadcastChannel`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":132874,"byte_end":132954,"line_start":437,"line_end":437,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135269,"byte_end":135287,"line_start":494,"line_end":494,"column_start":20,"column_end":38},"name":"StateReceiveFuture","qualname":"::channel::state_broadcast::if_alloc::shared::StateReceiveFuture","value":"StateReceiveFuture {  }","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772}],"decl_id":null,"docs":" A Future that is returned by the `receive` function on a state broadcast channel.\n The future gets resolved with `Some((state_id, state))` when a value could be\n received from the channel.","sig":null,"attributes":[{"value":"/ A Future that is returned by the `receive` function on a state broadcast channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134560,"byte_end":134645,"line_start":482,"line_end":482,"column_start":9,"column_end":94}},{"value":"/ The future gets resolved with `Some((state_id, state))` when a value could be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134654,"byte_end":134735,"line_start":483,"line_end":483,"column_start":9,"column_end":90}},{"value":"/ received from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134744,"byte_end":134774,"line_start":484,"line_end":484,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134783,"byte_end":134786,"line_start":485,"line_end":485,"column_start":9,"column_end":12}},{"value":"/ `state` represents the new state which had been retrieved from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134795,"byte_end":134874,"line_start":486,"line_end":486,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134883,"byte_end":134886,"line_start":487,"line_end":487,"column_start":9,"column_end":12}},{"value":"/ `state_id` is the [`StateId`] which can be passed as a parameter to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134895,"byte_end":134966,"line_start":488,"line_end":488,"column_start":9,"column_end":80}},{"value":"/ `receive()` in order to fetch the next state from the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":134975,"byte_end":135041,"line_start":489,"line_end":489,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135050,"byte_end":135053,"line_start":490,"line_end":490,"column_start":9,"column_end":12}},{"value":"/ If the channels gets closed and no items are still enqueued inside the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135062,"byte_end":135136,"line_start":491,"line_end":491,"column_start":9,"column_end":83}},{"value":"/ channel, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135145,"byte_end":135192,"line_start":492,"line_end":492,"column_start":9,"column_end":56}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135201,"byte_end":135249,"line_start":493,"line_end":493,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138589,"byte_end":138607,"line_start":574,"line_end":574,"column_start":20,"column_end":38},"name":"GenericStateSender","qualname":"::channel::state_broadcast::if_alloc::shared::GenericStateSender","value":"GenericStateSender {  }","parent":null,"children":[{"krate":0,"index":796}],"decl_id":null,"docs":" The sending side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The sending side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138385,"byte_end":138455,"line_start":570,"line_end":570,"column_start":9,"column_end":79}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138464,"byte_end":138493,"line_start":571,"line_end":571,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138502,"byte_end":138505,"line_start":572,"line_end":572,"column_start":9,"column_end":12}},{"value":"/ Values can be sent into the channel through `send`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138514,"byte_end":138569,"line_start":573,"line_end":573,"column_start":9,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":139168,"byte_end":139188,"line_start":589,"line_end":589,"column_start":20,"column_end":40},"name":"GenericStateReceiver","qualname":"::channel::state_broadcast::if_alloc::shared::GenericStateReceiver","value":"GenericStateReceiver {  }","parent":null,"children":[{"krate":0,"index":800}],"decl_id":null,"docs":" The receiving side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The receiving side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138853,"byte_end":138925,"line_start":584,"line_end":584,"column_start":9,"column_end":81}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138934,"byte_end":138963,"line_start":585,"line_end":585,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138972,"byte_end":138975,"line_start":586,"line_end":586,"column_start":9,"column_end":12}},{"value":"/ Tasks can receive values from the channel through the `receive` method.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":138984,"byte_end":139059,"line_start":587,"line_end":587,"column_start":9,"column_end":84}},{"value":"/ The returned Future will get resolved when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":139068,"byte_end":139148,"line_start":588,"line_end":588,"column_start":9,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":143018,"byte_end":143049,"line_start":699,"line_end":699,"column_start":16,"column_end":47},"name":"generic_state_broadcast_channel","qualname":"::channel::state_broadcast::if_alloc::shared::generic_state_broadcast_channel","value":"pub fn generic_state_broadcast_channel<MutexType, T>()\n-> (GenericStateSender<MutexType, T>, GenericStateReceiver<MutexType, T>)\nwhere MutexType: RawMutex, T: Clone + Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new state broadcast channel which can be used to exchange values\n of type `T` between concurrent tasks.\n The ends of the Channel are represented through\n the returned Sender and Receiver.","sig":null,"attributes":[{"value":"/ Creates a new state broadcast channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142364,"byte_end":142442,"line_start":685,"line_end":685,"column_start":9,"column_end":87}},{"value":"/ of type `T` between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142451,"byte_end":142492,"line_start":686,"line_end":686,"column_start":9,"column_end":50}},{"value":"/ The ends of the Channel are represented through","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142501,"byte_end":142552,"line_start":687,"line_end":687,"column_start":9,"column_end":60}},{"value":"/ the returned Sender and Receiver.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142561,"byte_end":142598,"line_start":688,"line_end":688,"column_start":9,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142607,"byte_end":142610,"line_start":689,"line_end":689,"column_start":9,"column_end":12}},{"value":"/ As soon es either the senders or receivers is closed, the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142619,"byte_end":142688,"line_start":690,"line_end":690,"column_start":9,"column_end":78}},{"value":"/ itself will be closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142697,"byte_end":142723,"line_start":691,"line_end":691,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142732,"byte_end":142735,"line_start":692,"line_end":692,"column_start":9,"column_end":12}},{"value":"/ Example for creating a channel to transmit an integer value:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142744,"byte_end":142808,"line_start":693,"line_end":693,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142817,"byte_end":142820,"line_start":694,"line_end":694,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142829,"byte_end":142836,"line_start":695,"line_end":695,"column_start":9,"column_end":16}},{"value":"/ # use futures_intrusive::channel::shared::state_broadcast_channel;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142845,"byte_end":142915,"line_start":696,"line_end":696,"column_start":9,"column_end":79}},{"value":"/ let (sender, receiver) = state_broadcast_channel::<i32>();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142924,"byte_end":142986,"line_start":697,"line_end":697,"column_start":9,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":142995,"byte_end":143002,"line_start":698,"line_end":698,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144284,"byte_end":144288,"line_start":734,"line_end":734,"column_start":20,"column_end":24},"name":"send","qualname":"<GenericStateSender<MutexType, T>>::send","value":"pub fn send(&Self, T) -> Result<(), ChannelSendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single value to the channel.","sig":null,"attributes":[{"value":"/ Writes a single value to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":143931,"byte_end":143972,"line_start":728,"line_end":728,"column_start":13,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":143985,"byte_end":143988,"line_start":729,"line_end":729,"column_start":13,"column_end":16}},{"value":"/ This will notify waiters about the availability of the value.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144001,"byte_end":144066,"line_start":730,"line_end":730,"column_start":13,"column_end":78}},{"value":"/ If a value had been written to the channel before, or if the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144079,"byte_end":144143,"line_start":731,"line_end":731,"column_start":13,"column_end":77}},{"value":"/ channel is closed, the new value will be rejected and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144156,"byte_end":144213,"line_start":732,"line_end":732,"column_start":13,"column_end":70}},{"value":"/ returned inside the error variant.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144226,"byte_end":144264,"line_start":733,"line_end":733,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145067,"byte_end":145074,"line_start":752,"line_end":752,"column_start":20,"column_end":27},"name":"receive","qualname":"<GenericStateReceiver<MutexType, T>>::receive","value":"pub fn receive(&Self, StateId) -> StateReceiveFuture<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel\n or the channel is closed.\n `state_id` specifies the minimum state ID that should be retrieved\n by the `receive` operation.","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144578,"byte_end":144657,"line_start":744,"line_end":744,"column_start":13,"column_end":92}},{"value":"/ or the channel is closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144670,"byte_end":144699,"line_start":745,"line_end":745,"column_start":13,"column_end":42}},{"value":"/ `state_id` specifies the minimum state ID that should be retrieved","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144712,"byte_end":144782,"line_start":746,"line_end":746,"column_start":13,"column_end":83}},{"value":"/ by the `receive` operation.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144795,"byte_end":144826,"line_start":747,"line_end":747,"column_start":13,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144839,"byte_end":144842,"line_start":748,"line_end":748,"column_start":13,"column_end":16}},{"value":"/ The returned [`StateReceiveFuture`] will get fulfilled with the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144855,"byte_end":144922,"line_start":749,"line_end":749,"column_start":13,"column_end":80}},{"value":"/ retrieved value as well as the [`StateId`] which is required to retrieve","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144935,"byte_end":145011,"line_start":750,"line_end":750,"column_start":13,"column_end":89}},{"value":"/ the following state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145024,"byte_end":145047,"line_start":751,"line_end":751,"column_start":13,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145727,"byte_end":145738,"line_start":767,"line_end":767,"column_start":20,"column_end":31},"name":"try_receive","qualname":"<GenericStateReceiver<MutexType, T>>::try_receive","value":"pub fn try_receive(&Self, StateId) -> Option<(StateId, T)>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to retrieve a value whose `StateId` is greater than the one provided.","sig":null,"attributes":[{"value":"/ Attempt to retrieve a value whose `StateId` is greater than the one provided.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145447,"byte_end":145528,"line_start":763,"line_end":763,"column_start":13,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145541,"byte_end":145544,"line_start":764,"line_end":764,"column_start":13,"column_end":16}},{"value":"/ Returns `None` if no value is found in the channel, or if the current `StateId`","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145557,"byte_end":145640,"line_start":765,"line_end":765,"column_start":13,"column_end":96}},{"value":"/ of the value is less or equal to the one provided.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":145653,"byte_end":145707,"line_start":766,"line_end":766,"column_start":13,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146174,"byte_end":146185,"line_start":781,"line_end":781,"column_start":22,"column_end":33},"name":"StateSender","qualname":"::channel::state_broadcast::if_alloc::shared::if_alloc::StateSender","value":"GenericStateSender<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericStateSender`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericStateSender`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146082,"byte_end":146152,"line_start":780,"line_end":780,"column_start":13,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146359,"byte_end":146372,"line_start":784,"line_end":784,"column_start":22,"column_end":35},"name":"StateReceiver","qualname":"::channel::state_broadcast::if_alloc::shared::if_alloc::StateReceiver","value":"GenericStateReceiver<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericStateReceiver`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericStateReceiver`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146265,"byte_end":146337,"line_start":783,"line_end":783,"column_start":13,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146607,"byte_end":146630,"line_start":790,"line_end":790,"column_start":20,"column_end":43},"name":"state_broadcast_channel","qualname":"::channel::state_broadcast::if_alloc::shared::if_alloc::state_broadcast_channel","value":"pub fn state_broadcast_channel<T>() -> (StateSender<T>, StateReceiver<T>)\nwhere T: Clone + Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new state broadcast channel.","sig":null,"attributes":[{"value":"/ Creates a new state broadcast channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146455,"byte_end":146497,"line_start":787,"line_end":787,"column_start":13,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146510,"byte_end":146513,"line_start":788,"line_end":788,"column_start":13,"column_end":16}},{"value":"/ Refer to [`generic_state_broadcast_channel`] for details.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":146526,"byte_end":146587,"line_start":789,"line_end":789,"column_start":13,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161205,"byte_end":161219,"line_start":362,"line_end":362,"column_start":12,"column_end":26},"name":"GenericChannel","qualname":"::channel::mpmc::GenericChannel","value":"GenericChannel {  }","parent":null,"children":[{"krate":0,"index":920}],"decl_id":null,"docs":" A channel which can be used to exchange values of type `T` between\n concurrent tasks.","sig":null,"attributes":[{"value":"/ A channel which can be used to exchange values of type `T` between","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160515,"byte_end":160585,"line_start":346,"line_end":346,"column_start":1,"column_end":71}},{"value":"/ concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160586,"byte_end":160607,"line_start":347,"line_end":347,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160608,"byte_end":160611,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ `A` represents the backing buffer for a Channel. E.g. a channel which","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160612,"byte_end":160685,"line_start":349,"line_end":349,"column_start":1,"column_end":74}},{"value":"/ can buffer up to 4 u32 values can be created via:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160686,"byte_end":160739,"line_start":350,"line_end":350,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160740,"byte_end":160743,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160744,"byte_end":160751,"line_start":352,"line_end":352,"column_start":1,"column_end":8}},{"value":"/ # use futures_intrusive::channel::LocalChannel;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160752,"byte_end":160803,"line_start":353,"line_end":353,"column_start":1,"column_end":52}},{"value":"/ let channel: LocalChannel<i32, [i32; 4]> = LocalChannel::new();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160804,"byte_end":160871,"line_start":354,"line_end":354,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160872,"byte_end":160879,"line_start":355,"line_end":355,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160880,"byte_end":160883,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ Tasks can receive values from the channel through the `receive` method.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160884,"byte_end":160959,"line_start":357,"line_end":357,"column_start":1,"column_end":76}},{"value":"/ The returned Future will get resolved when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":160960,"byte_end":161040,"line_start":358,"line_end":358,"column_start":1,"column_end":81}},{"value":"/ Values can be sent into the channel through `send`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161041,"byte_end":161096,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"/ The returned Future will get resolved when the value has been stored","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161097,"byte_end":161169,"line_start":360,"line_end":360,"column_start":1,"column_end":73}},{"value":"/ inside the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161170,"byte_end":161193,"line_start":361,"line_end":361,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162264,"byte_end":162267,"line_start":401,"line_end":401,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericChannel<MutexType, T, A>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Channel, utilizing the default capacity that\n the RingBuffer in `A` provides.\n","sig":null,"attributes":[{"value":"/ Creates a new Channel, utilizing the default capacity that","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162150,"byte_end":162212,"line_start":399,"line_end":399,"column_start":5,"column_end":67}},{"value":"/ the RingBuffer in `A` provides.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162217,"byte_end":162252,"line_start":400,"line_end":400,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162607,"byte_end":162620,"line_start":410,"line_end":410,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<GenericChannel<MutexType, T, A>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Channel, which has storage for a `capacity` items.\n Depending on the utilized `RingBuf` type, the capacity argument might\n be ignored and the default capacity might be utilized.\n","sig":null,"attributes":[{"value":"/ Creates a new Channel, which has storage for a `capacity` items.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162386,"byte_end":162454,"line_start":407,"line_end":407,"column_start":5,"column_end":73}},{"value":"/ Depending on the utilized `RingBuf` type, the capacity argument might","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162459,"byte_end":162532,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ be ignored and the default capacity might be utilized.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162537,"byte_end":162595,"line_start":409,"line_end":409,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163027,"byte_end":163031,"line_start":420,"line_end":420,"column_start":12,"column_end":16},"name":"send","qualname":"<GenericChannel<MutexType, T, A>>::send","value":"pub fn send(&Self, T) -> ChannelSendFuture<, MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when the value has been written to\n the channel.\n If the channel gets closed while the send is in progress, sending the\n value will fail, and the future will deliver the value back.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when the value has been written to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162772,"byte_end":162847,"line_start":416,"line_end":416,"column_start":5,"column_end":80}},{"value":"/ the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162852,"byte_end":162868,"line_start":417,"line_end":417,"column_start":5,"column_end":21}},{"value":"/ If the channel gets closed while the send is in progress, sending the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162873,"byte_end":162946,"line_start":418,"line_end":418,"column_start":5,"column_end":78}},{"value":"/ value will fail, and the future will deliver the value back.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162951,"byte_end":163015,"line_start":419,"line_end":419,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163916,"byte_end":163924,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"try_send","qualname":"<GenericChannel<MutexType, T, A>>::try_send","value":"pub fn try_send(&Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to send the value without waiting.","sig":null,"attributes":[{"value":"/ Attempt to send the value without waiting.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163273,"byte_end":163319,"line_start":428,"line_end":428,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163324,"byte_end":163327,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ This operation is not supported for unbuffered channels and will","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163332,"byte_end":163400,"line_start":430,"line_end":430,"column_start":5,"column_end":73}},{"value":"/ panic if the capacity of the `RingBuf` is zero. The reason for this is","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163405,"byte_end":163479,"line_start":431,"line_end":431,"column_start":5,"column_end":79}},{"value":"/ that the actual value transfer on unbuffered channels always happens","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163484,"byte_end":163556,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ when a receiving task copies the value out of the sending task while it","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163561,"byte_end":163636,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/ is waiting. If the sending task does not wait, the value can not be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163641,"byte_end":163712,"line_start":434,"line_end":434,"column_start":5,"column_end":76}},{"value":"/ transferred. Since this method can therefore never yield a reasonable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163717,"byte_end":163790,"line_start":435,"line_end":435,"column_start":5,"column_end":78}},{"value":"/ result with unbuffered channels, it panics in order to highlight the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163795,"byte_end":163867,"line_start":436,"line_end":436,"column_start":5,"column_end":77}},{"value":"/ use of an inappropriate API.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":163872,"byte_end":163904,"line_start":437,"line_end":437,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":164406,"byte_end":164413,"line_start":453,"line_end":453,"column_start":12,"column_end":19},"name":"receive","qualname":"<GenericChannel<MutexType, T, A>>::receive","value":"pub fn receive(&Self) -> ChannelReceiveFuture<, MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel.\n If the channels gets closed, the future will resolve to `None`.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":164242,"byte_end":164322,"line_start":451,"line_end":451,"column_start":5,"column_end":85}},{"value":"/ If the channels gets closed, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":164327,"byte_end":164394,"line_start":452,"line_end":452,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":164720,"byte_end":164731,"line_start":462,"line_end":462,"column_start":12,"column_end":23},"name":"try_receive","qualname":"<GenericChannel<MutexType, T, A>>::try_receive","value":"pub fn try_receive(&Self) -> Result<T, TryReceiveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to receive a value of the channel without waiting.\n","sig":null,"attributes":[{"value":"/ Attempt to receive a value of the channel without waiting.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":164646,"byte_end":164708,"line_start":461,"line_end":461,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165282,"byte_end":165288,"line_start":480,"line_end":480,"column_start":12,"column_end":18},"name":"stream","qualname":"<GenericChannel<MutexType, T, A>>::stream","value":"pub fn stream(&Self) -> ChannelStream<, MutexType, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns a stream that will receive values from this channel.","sig":null,"attributes":[{"value":"/ Returns a stream that will receive values from this channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165073,"byte_end":165137,"line_start":476,"line_end":476,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165142,"byte_end":165145,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ This stream does not yield `None` when the channel is empty,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165150,"byte_end":165214,"line_start":478,"line_end":478,"column_start":5,"column_end":69}},{"value":"/ instead it yields `None` when it is terminated.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165219,"byte_end":165270,"line_start":479,"line_end":479,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165667,"byte_end":165672,"line_start":491,"line_end":491,"column_start":12,"column_end":17},"name":"close","qualname":"<GenericChannel<MutexType, T, A>>::close","value":"pub fn close(&Self) -> CloseStatus","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.\n All pending and future send attempts will fail.\n Receive attempts will continue to succeed as long as there are items\n stored inside the channel. Further attempts will fail.\n","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165436,"byte_end":165459,"line_start":487,"line_end":487,"column_start":5,"column_end":28}},{"value":"/ All pending and future send attempts will fail.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165464,"byte_end":165515,"line_start":488,"line_end":488,"column_start":5,"column_end":56}},{"value":"/ Receive attempts will continue to succeed as long as there are items","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165520,"byte_end":165592,"line_start":489,"line_end":489,"column_start":5,"column_end":77}},{"value":"/ stored inside the channel. Further attempts will fail.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165597,"byte_end":165655,"line_start":490,"line_end":490,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167602,"byte_end":167615,"line_start":565,"line_end":565,"column_start":12,"column_end":25},"name":"ChannelStream","qualname":"::channel::mpmc::ChannelStream","value":"ChannelStream {  }","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2118}],"decl_id":null,"docs":" A stream that receives from a `GenericChannel`.","sig":null,"attributes":[{"value":"/ A stream that receives from a `GenericChannel`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167398,"byte_end":167449,"line_start":560,"line_end":560,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167450,"byte_end":167453,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ Not driving the `ChannelStream` to completion after it has been polled","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167454,"byte_end":167528,"line_start":562,"line_end":562,"column_start":1,"column_end":75}},{"value":"/ might lead to lost wakeup notifications.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167529,"byte_end":167573,"line_start":563,"line_end":563,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":170096,"byte_end":170108,"line_start":640,"line_end":640,"column_start":10,"column_end":22},"name":"LocalChannel","qualname":"::channel::mpmc::LocalChannel","value":"GenericChannel<NoopLock, T, ArrayBuf<T, A>>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericChannel`] implementation which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericChannel`] implementation which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":170021,"byte_end":170086,"line_start":639,"line_end":639,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":170250,"byte_end":170272,"line_start":643,"line_end":643,"column_start":10,"column_end":32},"name":"LocalUnbufferedChannel","qualname":"::channel::mpmc::LocalUnbufferedChannel","value":"LocalChannel<T, [T; ]>","parent":null,"children":[],"decl_id":null,"docs":" An unbuffered [`GenericChannel`] implementation which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ An unbuffered [`GenericChannel`] implementation which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":170163,"byte_end":170240,"line_start":642,"line_end":642,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":171070,"byte_end":171077,"line_start":661,"line_end":661,"column_start":14,"column_end":21},"name":"Channel","qualname":"::channel::mpmc::if_alloc::Channel","value":"GenericChannel<parking_lot::RawMutex, T, ArrayBuf<T, A>>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericChannel`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericChannel`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":170990,"byte_end":171056,"line_start":660,"line_end":660,"column_start":5,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":171249,"byte_end":171266,"line_start":665,"line_end":665,"column_start":14,"column_end":31},"name":"UnbufferedChannel","qualname":"::channel::mpmc::if_alloc::UnbufferedChannel","value":"Channel<T, [T; ]>","parent":null,"children":[],"decl_id":null,"docs":" An unbuffered [`GenericChannel`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ An unbuffered [`GenericChannel`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":171157,"byte_end":171235,"line_start":664,"line_end":664,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174272,"byte_end":174285,"line_start":744,"line_end":744,"column_start":20,"column_end":33},"name":"GenericSender","qualname":"::channel::mpmc::if_alloc::shared::GenericSender","value":"GenericSender {  }","parent":null,"children":[{"krate":0,"index":1016}],"decl_id":null,"docs":" The sending side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The sending side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":173967,"byte_end":174037,"line_start":739,"line_end":739,"column_start":9,"column_end":79}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174046,"byte_end":174075,"line_start":740,"line_end":740,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174084,"byte_end":174087,"line_start":741,"line_end":741,"column_start":9,"column_end":12}},{"value":"/ Values can be sent into the channel through `send`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174096,"byte_end":174151,"line_start":742,"line_end":742,"column_start":9,"column_end":64}},{"value":"/ The returned Future will get resolved when the value has been stored inside the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174160,"byte_end":174252,"line_start":743,"line_end":743,"column_start":9,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174833,"byte_end":174848,"line_start":758,"line_end":758,"column_start":20,"column_end":35},"name":"GenericReceiver","qualname":"::channel::mpmc::if_alloc::shared::GenericReceiver","value":"GenericReceiver {  }","parent":null,"children":[{"krate":0,"index":1021}],"decl_id":null,"docs":" The receiving side of a channel which can be used to exchange values\n between concurrent tasks.","sig":null,"attributes":[{"value":"/ The receiving side of a channel which can be used to exchange values","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174518,"byte_end":174590,"line_start":753,"line_end":753,"column_start":9,"column_end":81}},{"value":"/ between concurrent tasks.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174599,"byte_end":174628,"line_start":754,"line_end":754,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174637,"byte_end":174640,"line_start":755,"line_end":755,"column_start":9,"column_end":12}},{"value":"/ Tasks can receive values from the channel through the `receive` method.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174649,"byte_end":174724,"line_start":756,"line_end":756,"column_start":9,"column_end":84}},{"value":"/ The returned Future will get resolved when a value is sent into the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":174733,"byte_end":174813,"line_start":757,"line_end":757,"column_start":9,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":1052},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178787,"byte_end":178802,"line_start":868,"line_end":868,"column_start":16,"column_end":31},"name":"generic_channel","qualname":"::channel::mpmc::if_alloc::shared::generic_channel","value":"pub fn generic_channel<MutexType, T, A>(usize)\n-> (GenericSender<MutexType, T, A>, GenericReceiver<MutexType, T, A>) where\nMutexType: RawMutex, A: RingBuf<Item = T>, T: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Channel which can be used to exchange values of type `T` between\n concurrent tasks. The ends of the Channel are represented through\n the returned Sender and Receiver.\n Both the Sender and Receiver can be cloned in order to let more tasks\n interact with the Channel.","sig":null,"attributes":[{"value":"/ Creates a new Channel which can be used to exchange values of type `T` between","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178069,"byte_end":178151,"line_start":853,"line_end":853,"column_start":9,"column_end":91}},{"value":"/ concurrent tasks. The ends of the Channel are represented through","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178160,"byte_end":178229,"line_start":854,"line_end":854,"column_start":9,"column_end":78}},{"value":"/ the returned Sender and Receiver.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178238,"byte_end":178275,"line_start":855,"line_end":855,"column_start":9,"column_end":46}},{"value":"/ Both the Sender and Receiver can be cloned in order to let more tasks","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178284,"byte_end":178357,"line_start":856,"line_end":856,"column_start":9,"column_end":82}},{"value":"/ interact with the Channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178366,"byte_end":178396,"line_start":857,"line_end":857,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178405,"byte_end":178408,"line_start":858,"line_end":858,"column_start":9,"column_end":12}},{"value":"/ As soon es either all Senders or all Receivers are closed, the Channel","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178417,"byte_end":178491,"line_start":859,"line_end":859,"column_start":9,"column_end":83}},{"value":"/ itself will be closed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178500,"byte_end":178526,"line_start":860,"line_end":860,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178535,"byte_end":178538,"line_start":861,"line_end":861,"column_start":9,"column_end":12}},{"value":"/ The channel can buffer up to `capacity` items internally.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178547,"byte_end":178608,"line_start":862,"line_end":862,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178617,"byte_end":178620,"line_start":863,"line_end":863,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178629,"byte_end":178636,"line_start":864,"line_end":864,"column_start":9,"column_end":16}},{"value":"/ # use futures_intrusive::channel::shared::channel;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178645,"byte_end":178699,"line_start":865,"line_end":865,"column_start":9,"column_end":63}},{"value":"/ let (sender, receiver) = channel::<i32>(4);","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178708,"byte_end":178755,"line_start":866,"line_end":866,"column_start":9,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":178764,"byte_end":178771,"line_start":867,"line_end":867,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179990,"byte_end":179994,"line_start":902,"line_end":902,"column_start":20,"column_end":24},"name":"send","qualname":"<GenericSender<MutexType, T, A>>::send","value":"pub fn send(&Self, T) -> ChannelSendFuture<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when the value has been written to\n the channel.\n If the channel gets closed while the send is in progress, sending the\n value will fail, and the future will deliver the value back.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when the value has been written to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179703,"byte_end":179778,"line_start":898,"line_end":898,"column_start":13,"column_end":88}},{"value":"/ the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179791,"byte_end":179807,"line_start":899,"line_end":899,"column_start":13,"column_end":29}},{"value":"/ If the channel gets closed while the send is in progress, sending the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179820,"byte_end":179893,"line_start":900,"line_end":900,"column_start":13,"column_end":86}},{"value":"/ value will fail, and the future will deliver the value back.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179906,"byte_end":179970,"line_start":901,"line_end":901,"column_start":13,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181029,"byte_end":181037,"line_start":920,"line_end":920,"column_start":20,"column_end":28},"name":"try_send","qualname":"<GenericSender<MutexType, T, A>>::try_send","value":"pub fn try_send(&Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to send the value without waiting.","sig":null,"attributes":[{"value":"/ Attempt to send the value without waiting.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180306,"byte_end":180352,"line_start":910,"line_end":910,"column_start":13,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180365,"byte_end":180368,"line_start":911,"line_end":911,"column_start":13,"column_end":16}},{"value":"/ This operation is not supported for unbuffered channels and will","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180381,"byte_end":180449,"line_start":912,"line_end":912,"column_start":13,"column_end":81}},{"value":"/ panic if the capacity of the `RingBuf` is zero. The reason for this is","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180462,"byte_end":180536,"line_start":913,"line_end":913,"column_start":13,"column_end":87}},{"value":"/ that the actual value transfer on unbuffered channels always happens","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180549,"byte_end":180621,"line_start":914,"line_end":914,"column_start":13,"column_end":85}},{"value":"/ when a receiving task copies the value out of the sending task while it","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180634,"byte_end":180709,"line_start":915,"line_end":915,"column_start":13,"column_end":88}},{"value":"/ is waiting. If the sending task does not wait, the value can not be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180722,"byte_end":180793,"line_start":916,"line_end":916,"column_start":13,"column_end":84}},{"value":"/ transferred. Since this method can therefore never yield a reasonable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180806,"byte_end":180879,"line_start":917,"line_end":917,"column_start":13,"column_end":86}},{"value":"/ result with unbuffered channels, it panics in order to highlight the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180892,"byte_end":180964,"line_start":918,"line_end":918,"column_start":13,"column_end":85}},{"value":"/ use of an inappropriate API.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":180977,"byte_end":181009,"line_start":919,"line_end":919,"column_start":13,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181434,"byte_end":181439,"line_start":928,"line_end":928,"column_start":20,"column_end":25},"name":"close","qualname":"<GenericSender<MutexType, T, A>>::close","value":"pub fn close(&Self) -> CloseStatus","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.\n All pending future send attempts will fail.\n Receive attempts will continue to succeed as long as there are items\n stored inside the channel. Further attempts will return `None`.\n","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181166,"byte_end":181189,"line_start":924,"line_end":924,"column_start":13,"column_end":36}},{"value":"/ All pending future send attempts will fail.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181202,"byte_end":181249,"line_start":925,"line_end":925,"column_start":13,"column_end":60}},{"value":"/ Receive attempts will continue to succeed as long as there are items","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181262,"byte_end":181334,"line_start":926,"line_end":926,"column_start":13,"column_end":85}},{"value":"/ stored inside the channel. Further attempts will return `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181347,"byte_end":181414,"line_start":927,"line_end":927,"column_start":13,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181898,"byte_end":181905,"line_start":940,"line_end":940,"column_start":20,"column_end":27},"name":"receive","qualname":"<GenericReceiver<MutexType, T, A>>::receive","value":"pub fn receive(&Self) -> ChannelReceiveFuture<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when a value is written to the channel.\n If the channels gets closed, the future will resolve to `None`.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when a value is written to the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181718,"byte_end":181798,"line_start":938,"line_end":938,"column_start":13,"column_end":93}},{"value":"/ If the channels gets closed, the future will resolve to `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181811,"byte_end":181878,"line_start":939,"line_end":939,"column_start":13,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182284,"byte_end":182295,"line_start":949,"line_end":949,"column_start":20,"column_end":31},"name":"try_receive","qualname":"<GenericReceiver<MutexType, T, A>>::try_receive","value":"pub fn try_receive(&Self) -> Result<T, TryReceiveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to receive form the channel without waiting.\n","sig":null,"attributes":[{"value":"/ Attempt to receive form the channel without waiting.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182208,"byte_end":182264,"line_start":948,"line_end":948,"column_start":13,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182679,"byte_end":182684,"line_start":957,"line_end":957,"column_start":20,"column_end":25},"name":"close","qualname":"<GenericReceiver<MutexType, T, A>>::close","value":"pub fn close(&Self) -> CloseStatus","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.\n All pending future send attempts will fail.\n Receive attempts will continue to succeed as long as there are items\n stored inside the channel. Further attempts will return `None`.\n","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182411,"byte_end":182434,"line_start":953,"line_end":953,"column_start":13,"column_end":36}},{"value":"/ All pending future send attempts will fail.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182447,"byte_end":182494,"line_start":954,"line_end":954,"column_start":13,"column_end":60}},{"value":"/ Receive attempts will continue to succeed as long as there are items","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182507,"byte_end":182579,"line_start":955,"line_end":955,"column_start":13,"column_end":85}},{"value":"/ stored inside the channel. Further attempts will return `None`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182592,"byte_end":182659,"line_start":956,"line_end":956,"column_start":13,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183020,"byte_end":183031,"line_start":965,"line_end":965,"column_start":20,"column_end":31},"name":"into_stream","qualname":"<GenericReceiver<MutexType, T, A>>::into_stream","value":"pub fn into_stream(Self) -> SharedStream<MutexType, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns a stream that will receive values from this channel.","sig":null,"attributes":[{"value":"/ Returns a stream that will receive values from this channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182779,"byte_end":182843,"line_start":961,"line_end":961,"column_start":13,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182856,"byte_end":182859,"line_start":962,"line_end":962,"column_start":13,"column_end":16}},{"value":"/ This stream does not yield `None` when the channel is empty,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182872,"byte_end":182936,"line_start":963,"line_end":963,"column_start":13,"column_end":77}},{"value":"/ instead it yields `None` when it is terminated.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":182949,"byte_end":183000,"line_start":964,"line_end":964,"column_start":13,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2125},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183489,"byte_end":183501,"line_start":978,"line_end":978,"column_start":20,"column_end":32},"name":"SharedStream","qualname":"::channel::mpmc::if_alloc::shared::SharedStream","value":"SharedStream {  }","parent":null,"children":[{"krate":0,"index":2129},{"krate":0,"index":2130}],"decl_id":null,"docs":" A stream that receives from channel using a `GenericReceiver`.","sig":null,"attributes":[{"value":"/ A stream that receives from channel using a `GenericReceiver`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183231,"byte_end":183297,"line_start":973,"line_end":973,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183306,"byte_end":183309,"line_start":974,"line_end":974,"column_start":9,"column_end":12}},{"value":"/ Not driving the `SharedStream` to completion after it has been polled","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183318,"byte_end":183391,"line_start":975,"line_end":975,"column_start":9,"column_end":82}},{"value":"/ might lead to lost wakeup notifications.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183400,"byte_end":183444,"line_start":976,"line_end":976,"column_start":9,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1085},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187043,"byte_end":187049,"line_start":1067,"line_end":1067,"column_start":22,"column_end":28},"name":"Sender","qualname":"::channel::mpmc::if_alloc::shared::if_alloc::Sender","value":"GenericSender<parking_lot::RawMutex, T, GrowingHeapBuf<T>>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSender`] implementation backed by [`parking_lot`].","sig":null,"attributes":[{"value":"/ A [`GenericSender`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186686,"byte_end":186751,"line_start":1061,"line_end":1061,"column_start":13,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186764,"byte_end":186767,"line_start":1062,"line_end":1062,"column_start":13,"column_end":16}},{"value":"/ Uses a `GrowingHeapBuf` whose capacity grows dynamically up to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186780,"byte_end":186846,"line_start":1063,"line_end":1063,"column_start":13,"column_end":79}},{"value":"/ the given limit. Refer to [`GrowingHeapBuf`] for more information.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186859,"byte_end":186929,"line_start":1064,"line_end":1064,"column_start":13,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186942,"byte_end":186945,"line_start":1065,"line_end":1065,"column_start":13,"column_end":16}},{"value":"/ [`GrowingHeapBuf`]: ../../buffer/struct.GrowingHeapBuf.html","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186958,"byte_end":187021,"line_start":1066,"line_end":1066,"column_start":13,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":1087},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187502,"byte_end":187510,"line_start":1075,"line_end":1075,"column_start":22,"column_end":30},"name":"Receiver","qualname":"::channel::mpmc::if_alloc::shared::if_alloc::Receiver","value":"GenericReceiver<parking_lot::RawMutex, T, GrowingHeapBuf<T>>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericReceiver`] implementation backed by [`parking_lot`].","sig":null,"attributes":[{"value":"/ A [`GenericReceiver`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187143,"byte_end":187210,"line_start":1069,"line_end":1069,"column_start":13,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187223,"byte_end":187226,"line_start":1070,"line_end":1070,"column_start":13,"column_end":16}},{"value":"/ Uses a `GrowingHeapBuf` whose capacity grows dynamically up to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187239,"byte_end":187305,"line_start":1071,"line_end":1071,"column_start":13,"column_end":79}},{"value":"/ the given limit. Refer to [`GrowingHeapBuf`] for more information.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187318,"byte_end":187388,"line_start":1072,"line_end":1072,"column_start":13,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187401,"byte_end":187404,"line_start":1073,"line_end":1073,"column_start":13,"column_end":16}},{"value":"/ [`GrowingHeapBuf`]: ../../buffer/struct.GrowingHeapBuf.html","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187417,"byte_end":187480,"line_start":1074,"line_end":1074,"column_start":13,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187980,"byte_end":187987,"line_start":1084,"line_end":1084,"column_start":20,"column_end":27},"name":"channel","qualname":"::channel::mpmc::if_alloc::shared::if_alloc::channel","value":"pub fn channel<T>(usize) -> (Sender<T>, Receiver<T>) where T: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new channel with the given buffering capacity","sig":null,"attributes":[{"value":"/ Creates a new channel with the given buffering capacity","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187607,"byte_end":187666,"line_start":1078,"line_end":1078,"column_start":13,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187679,"byte_end":187682,"line_start":1079,"line_end":1079,"column_start":13,"column_end":16}},{"value":"/ Uses a `GrowingHeapBuf` whose capacity grows dynamically up to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187695,"byte_end":187761,"line_start":1080,"line_end":1080,"column_start":13,"column_end":79}},{"value":"/ the given limit. Refer to [`generic_channel`] and [`GrowingHeapBuf`] for more information.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187774,"byte_end":187868,"line_start":1081,"line_end":1081,"column_start":13,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187881,"byte_end":187884,"line_start":1082,"line_end":1082,"column_start":13,"column_end":16}},{"value":"/ [`GrowingHeapBuf`]: ../../buffer/struct.GrowingHeapBuf.html","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":187897,"byte_end":187960,"line_start":1083,"line_end":1083,"column_start":13,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188334,"byte_end":188350,"line_start":1093,"line_end":1093,"column_start":22,"column_end":38},"name":"UnbufferedSender","qualname":"::channel::mpmc::if_alloc::shared::if_alloc::UnbufferedSender","value":"GenericSender<parking_lot::RawMutex, T, GrowingHeapBuf<T>>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSender`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericSender`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188247,"byte_end":188312,"line_start":1092,"line_end":1092,"column_start":13,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188533,"byte_end":188551,"line_start":1096,"line_end":1096,"column_start":22,"column_end":40},"name":"UnbufferedReceiver","qualname":"::channel::mpmc::if_alloc::shared::if_alloc::UnbufferedReceiver","value":"GenericReceiver<parking_lot::RawMutex, T, GrowingHeapBuf<T>>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericReceiver`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericReceiver`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188444,"byte_end":188511,"line_start":1095,"line_end":1095,"column_start":13,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188779,"byte_end":188797,"line_start":1102,"line_end":1102,"column_start":20,"column_end":38},"name":"unbuffered_channel","qualname":"::channel::mpmc::if_alloc::shared::if_alloc::unbuffered_channel","value":"pub fn unbuffered_channel<T>() -> (Sender<T>, Receiver<T>) where T: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unbuffered channel.","sig":null,"attributes":[{"value":"/ Creates a new unbuffered channel.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188648,"byte_end":188685,"line_start":1099,"line_end":1099,"column_start":13,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188698,"byte_end":188701,"line_start":1100,"line_end":1100,"column_start":13,"column_end":16}},{"value":"/ Refer to [`generic_channel`] for details.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":188714,"byte_end":188759,"line_start":1101,"line_end":1101,"column_start":13,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63654,"byte_end":63660,"line_start":57,"line_end":57,"column_start":13,"column_end":19},"name":"shared","qualname":"::channel::if_alloc::shared","value":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112}],"decl_id":null,"docs":" Channel implementations where Sender and Receiver sides are cloneable\n and owned.\n The Futures produced by channels in this module don't require a lifetime\n parameter.\n","sig":null,"attributes":[{"value":"/ Channel implementations where Sender and Receiver sides are cloneable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63449,"byte_end":63522,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ and owned.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63527,"byte_end":63541,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/ The Futures produced by channels in this module don't require a lifetime","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63546,"byte_end":63622,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ parameter.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mod.rs","byte_start":63627,"byte_end":63641,"line_start":56,"line_end":56,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476}],"decl_id":null,"docs":" Asynchronous synchronization primitives based on intrusive collections.","sig":null,"attributes":[{"value":"/ Asynchronous synchronization primitives based on intrusive collections.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189166,"byte_end":189241,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189242,"byte_end":189245,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides various primitives for synchronizing concurrently","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189246,"byte_end":189320,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ executing futures.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mod.rs","byte_start":189321,"byte_end":189343,"line_start":4,"line_end":4,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195363,"byte_end":195386,"line_start":151,"line_end":151,"column_start":12,"column_end":35},"name":"GenericManualResetEvent","qualname":"::sync::manual_reset_event::GenericManualResetEvent","value":"GenericManualResetEvent {  }","parent":null,"children":[{"krate":0,"index":1152}],"decl_id":null,"docs":" A synchronization primitive which can be either in the set or reset state.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be either in the set or reset state.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195127,"byte_end":195205,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195206,"byte_end":195209,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Tasks can wait for the event to get set by obtaining a Future via `wait`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195210,"byte_end":195287,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/ This Future will get fulfilled when the event has been set.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195288,"byte_end":195351,"line_start":150,"line_end":150,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196138,"byte_end":196141,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericManualResetEvent<MutexType>>::new","value":"pub fn new(bool) -> GenericManualResetEvent<MutexType>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new ManualResetEvent in the given state\n","sig":null,"attributes":[{"value":"/ Creates a new ManualResetEvent in the given state","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196073,"byte_end":196126,"line_start":175,"line_end":175,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196430,"byte_end":196433,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"set","qualname":"<GenericManualResetEvent<MutexType>>::set","value":"pub fn set(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets the event.","sig":null,"attributes":[{"value":"/ Sets the event.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196332,"byte_end":196351,"line_start":182,"line_end":182,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196356,"byte_end":196359,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Setting the event will notify all pending waiters.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196364,"byte_end":196418,"line_start":184,"line_end":184,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196519,"byte_end":196524,"line_start":190,"line_end":190,"column_start":12,"column_end":17},"name":"reset","qualname":"<GenericManualResetEvent<MutexType>>::reset","value":"pub fn reset(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets the event.\n","sig":null,"attributes":[{"value":"/ Resets the event.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196486,"byte_end":196507,"line_start":189,"line_end":189,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196627,"byte_end":196633,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"is_set","qualname":"<GenericManualResetEvent<MutexType>>::is_set","value":"pub fn is_set(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the event is set\n","sig":null,"attributes":[{"value":"/ Returns whether the event is set","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196579,"byte_end":196615,"line_start":194,"line_end":194,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196772,"byte_end":196776,"line_start":200,"line_end":200,"column_start":12,"column_end":16},"name":"wait","qualname":"<GenericManualResetEvent<MutexType>>::wait","value":"pub fn wait(&Self) -> GenericWaitForEventFuture<, MutexType>","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when the event is set.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when the event is set.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196697,"byte_end":196760,"line_start":199,"line_end":199,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":197442,"byte_end":197467,"line_start":222,"line_end":222,"column_start":12,"column_end":37},"name":"GenericWaitForEventFuture","qualname":"::sync::manual_reset_event::GenericWaitForEventFuture","value":"GenericWaitForEventFuture {  }","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173}],"decl_id":null,"docs":" A Future that is resolved once the corresponding ManualResetEvent has been set\n","sig":null,"attributes":[{"value":"/ A Future that is resolved once the corresponding ManualResetEvent has been set","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":197299,"byte_end":197381,"line_start":220,"line_end":220,"column_start":1,"column_end":83}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":197382,"byte_end":197430,"line_start":221,"line_end":221,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200008,"byte_end":200029,"line_start":299,"line_end":299,"column_start":10,"column_end":31},"name":"LocalManualResetEvent","qualname":"::sync::manual_reset_event::LocalManualResetEvent","value":"GenericManualResetEvent<NoopLock>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericManualResetEvent`] which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericManualResetEvent`] which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":199939,"byte_end":199998,"line_start":298,"line_end":298,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200143,"byte_end":200166,"line_start":301,"line_end":301,"column_start":10,"column_end":33},"name":"LocalWaitForEventFuture","qualname":"::sync::manual_reset_event::LocalWaitForEventFuture","value":"GenericWaitForEventFuture","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericWaitForEventFuture`] for [`LocalManualResetEvent`].\n","sig":null,"attributes":[{"value":"/ A [`GenericWaitForEventFuture`] for [`LocalManualResetEvent`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200067,"byte_end":200133,"line_start":300,"line_end":300,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200433,"byte_end":200449,"line_start":310,"line_end":310,"column_start":14,"column_end":30},"name":"ManualResetEvent","qualname":"::sync::manual_reset_event::if_alloc::ManualResetEvent","value":"GenericManualResetEvent<parking_lot::RawMutex>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericManualResetEvent`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericManualResetEvent`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200344,"byte_end":200419,"line_start":309,"line_end":309,"column_start":5,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200579,"byte_end":200597,"line_start":312,"line_end":312,"column_start":14,"column_end":32},"name":"WaitForEventFuture","qualname":"::sync::manual_reset_event::if_alloc::WaitForEventFuture","value":"GenericWaitForEventFuture","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericWaitForEventFuture`] for [`ManualResetEvent`].\n","sig":null,"attributes":[{"value":"/ A [`GenericWaitForEventFuture`] for [`ManualResetEvent`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":200504,"byte_end":200565,"line_start":311,"line_end":311,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211196,"byte_end":211213,"line_start":277,"line_end":277,"column_start":12,"column_end":29},"name":"GenericMutexGuard","qualname":"::sync::mutex::GenericMutexGuard","value":"GenericMutexGuard {  }","parent":null,"children":[{"krate":0,"index":1257}],"decl_id":null,"docs":" An RAII guard returned by the `lock` and `try_lock` methods.\n When this structure is dropped (falls out of scope), the lock will be\n unlocked.\n","sig":null,"attributes":[{"value":"/ An RAII guard returned by the `lock` and `try_lock` methods.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211032,"byte_end":211096,"line_start":274,"line_end":274,"column_start":1,"column_end":65}},{"value":"/ When this structure is dropped (falls out of scope), the lock will be","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211097,"byte_end":211170,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ unlocked.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211171,"byte_end":211184,"line_start":276,"line_end":276,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1275},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212359,"byte_end":212381,"line_start":315,"line_end":315,"column_start":12,"column_end":34},"name":"GenericMutexLockFuture","qualname":"::sync::mutex::GenericMutexLockFuture","value":"GenericMutexLockFuture {  }","parent":null,"children":[{"krate":0,"index":1279},{"krate":0,"index":1280}],"decl_id":null,"docs":" A future which resolves when the target mutex has been successfully acquired.\n","sig":null,"attributes":[{"value":"/ A future which resolves when the target mutex has been successfully acquired.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212217,"byte_end":212298,"line_start":313,"line_end":313,"column_start":1,"column_end":82}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212299,"byte_end":212347,"line_start":314,"line_end":314,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215139,"byte_end":215151,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"GenericMutex","qualname":"::sync::mutex::GenericMutex","value":"GenericMutex {  }","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310}],"decl_id":null,"docs":" A futures-aware mutex.\n","sig":null,"attributes":[{"value":"/ A futures-aware mutex.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215101,"byte_end":215127,"line_start":397,"line_end":397,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216465,"byte_end":216468,"line_start":434,"line_end":434,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericMutex<MutexType, T>>::new","value":"pub fn new(T, bool) -> GenericMutex<MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new futures-aware mutex.","sig":null,"attributes":[{"value":"/ Creates a new futures-aware mutex.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215963,"byte_end":216001,"line_start":426,"line_end":426,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216006,"byte_end":216009,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ `is_fair` defines whether the `Mutex` should behave be fair regarding the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216014,"byte_end":216091,"line_start":428,"line_end":428,"column_start":5,"column_end":82}},{"value":"/ order of waiters. A fair `Mutex` will only allow the first waiter which","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216096,"byte_end":216171,"line_start":429,"line_end":429,"column_start":5,"column_end":80}},{"value":"/ tried to lock but failed to lock the `Mutex` once it's available again.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216176,"byte_end":216251,"line_start":430,"line_end":430,"column_start":5,"column_end":80}},{"value":"/ Other waiters must wait until either this locking attempt completes, and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216256,"byte_end":216332,"line_start":431,"line_end":431,"column_start":5,"column_end":81}},{"value":"/ the `Mutex` gets unlocked again, or until the `MutexLockFuture` which","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216337,"byte_end":216410,"line_start":432,"line_end":432,"column_start":5,"column_end":78}},{"value":"/ tried to gain the lock is dropped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216415,"byte_end":216453,"line_start":433,"line_end":433,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216860,"byte_end":216864,"line_start":445,"line_end":445,"column_start":12,"column_end":16},"name":"lock","qualname":"<GenericMutex<MutexType, T>>::lock","value":"pub fn lock(&Self) -> GenericMutexLockFuture<, MutexType, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquire the mutex asynchronously.","sig":null,"attributes":[{"value":"/ Acquire the mutex asynchronously.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216693,"byte_end":216730,"line_start":441,"line_end":441,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216735,"byte_end":216738,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ This method returns a future that will resolve once the mutex has been","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216743,"byte_end":216817,"line_start":443,"line_end":443,"column_start":5,"column_end":79}},{"value":"/ successfully acquired.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":216822,"byte_end":216848,"line_start":444,"line_end":444,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217321,"byte_end":217329,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<GenericMutex<MutexType, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<GenericMutexGuard<, MutexType, T>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to acquire the mutex","sig":null,"attributes":[{"value":"/ Tries to acquire the mutex","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217081,"byte_end":217111,"line_start":452,"line_end":452,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217116,"byte_end":217119,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ If acquiring the mutex is successful, a [`GenericMutexGuard`]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217124,"byte_end":217189,"line_start":454,"line_end":454,"column_start":5,"column_end":70}},{"value":"/ will be returned, which allows to access the contained data.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217194,"byte_end":217258,"line_start":455,"line_end":455,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217263,"byte_end":217266,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Otherwise `None` will be returned.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217271,"byte_end":217309,"line_start":457,"line_end":457,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217592,"byte_end":217601,"line_start":467,"line_end":467,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<GenericMutex<MutexType, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the mutex is locked.\n","sig":null,"attributes":[{"value":"/ Returns whether the mutex is locked.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217540,"byte_end":217580,"line_start":466,"line_end":466,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217776,"byte_end":217786,"line_start":475,"line_end":475,"column_start":10,"column_end":20},"name":"LocalMutex","qualname":"::sync::mutex::LocalMutex","value":"GenericMutex<NoopLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericMutex`] which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericMutex`] which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217718,"byte_end":217766,"line_start":474,"line_end":474,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217876,"byte_end":217891,"line_start":477,"line_end":477,"column_start":10,"column_end":25},"name":"LocalMutexGuard","qualname":"::sync::mutex::LocalMutexGuard","value":"GenericMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericMutexGuard`] for [`LocalMutex`].\n","sig":null,"attributes":[{"value":"/ A [`GenericMutexGuard`] for [`LocalMutex`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217819,"byte_end":217866,"line_start":476,"line_end":476,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217999,"byte_end":218019,"line_start":479,"line_end":479,"column_start":10,"column_end":30},"name":"LocalMutexLockFuture","qualname":"::sync::mutex::LocalMutexLockFuture","value":"GenericMutexLockFuture","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericMutexLockFuture`] for [`LocalMutex`].\n","sig":null,"attributes":[{"value":"/ A [`GenericMutexLockFuture`] for [`LocalMutex`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":217937,"byte_end":217989,"line_start":478,"line_end":478,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":218263,"byte_end":218268,"line_start":488,"line_end":488,"column_start":14,"column_end":19},"name":"Mutex","qualname":"::sync::mutex::if_alloc::Mutex","value":"GenericMutex<parking_lot::RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericMutex`] backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericMutex`] backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":218200,"byte_end":218249,"line_start":487,"line_end":487,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":218374,"byte_end":218384,"line_start":490,"line_end":490,"column_start":14,"column_end":24},"name":"MutexGuard","qualname":"::sync::mutex::if_alloc::MutexGuard","value":"GenericMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericMutexGuard`] for [`Mutex`].\n","sig":null,"attributes":[{"value":"/ A [`GenericMutexGuard`] for [`Mutex`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":218318,"byte_end":218360,"line_start":489,"line_end":489,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":218516,"byte_end":218531,"line_start":493,"line_end":493,"column_start":14,"column_end":29},"name":"MutexLockFuture","qualname":"::sync::mutex::if_alloc::MutexLockFuture","value":"GenericMutexLockFuture","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericMutexLockFuture`] for [`Mutex`].\n","sig":null,"attributes":[{"value":"/ A [`GenericMutexLockFuture`] for [`Mutex`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":218455,"byte_end":218502,"line_start":492,"line_end":492,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":230805,"byte_end":230829,"line_start":298,"line_end":298,"column_start":12,"column_end":36},"name":"GenericSemaphoreReleaser","qualname":"::sync::semaphore::GenericSemaphoreReleaser","value":"GenericSemaphoreReleaser {  }","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"decl_id":null,"docs":" An RAII guard returned by the `acquire` and `try_acquire` methods.","sig":null,"attributes":[{"value":"/ An RAII guard returned by the `acquire` and `try_acquire` methods.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":230554,"byte_end":230624,"line_start":293,"line_end":293,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":230625,"byte_end":230628,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ When this structure is dropped (falls out of scope),","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":230629,"byte_end":230685,"line_start":295,"line_end":295,"column_start":1,"column_end":57}},{"value":"/ the amount of permits that was used in the `acquire()` call will be released","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":230686,"byte_end":230766,"line_start":296,"line_end":296,"column_start":1,"column_end":81}},{"value":"/ back to the Semaphore.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":230767,"byte_end":230793,"line_start":297,"line_end":297,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231696,"byte_end":231702,"line_start":320,"line_end":320,"column_start":12,"column_end":18},"name":"disarm","qualname":"<GenericSemaphoreReleaser>::disarm","value":"pub fn disarm(&mut Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Prevents the SemaphoreReleaser from automatically releasing the permits\n when it gets dropped.\n This is helpful if the permits must be acquired for a longer lifetime\n than the one of the SemaphoreReleaser.\n If this method is used it is important to release the acquired permits\n manually back to the Semaphore.\n","sig":null,"attributes":[{"value":"/ Prevents the SemaphoreReleaser from automatically releasing the permits","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231335,"byte_end":231410,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ when it gets dropped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231415,"byte_end":231440,"line_start":315,"line_end":315,"column_start":5,"column_end":30}},{"value":"/ This is helpful if the permits must be acquired for a longer lifetime","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231445,"byte_end":231518,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/ than the one of the SemaphoreReleaser.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231523,"byte_end":231565,"line_start":317,"line_end":317,"column_start":5,"column_end":47}},{"value":"/ If this method is used it is important to release the acquired permits","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231570,"byte_end":231644,"line_start":318,"line_end":318,"column_start":5,"column_end":79}},{"value":"/ manually back to the Semaphore.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231649,"byte_end":231684,"line_start":319,"line_end":319,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232241,"byte_end":232270,"line_start":338,"line_end":338,"column_start":12,"column_end":41},"name":"GenericSemaphoreAcquireFuture","qualname":"::sync::semaphore::GenericSemaphoreAcquireFuture","value":"GenericSemaphoreAcquireFuture {  }","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415}],"decl_id":null,"docs":" A future which resolves when the target semaphore has been successfully acquired.\n","sig":null,"attributes":[{"value":"/ A future which resolves when the target semaphore has been successfully acquired.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232095,"byte_end":232180,"line_start":336,"line_end":336,"column_start":1,"column_end":86}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232181,"byte_end":232229,"line_start":337,"line_end":337,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":235950,"byte_end":235966,"line_start":433,"line_end":433,"column_start":12,"column_end":28},"name":"GenericSemaphore","qualname":"::sync::semaphore::GenericSemaphore","value":"GenericSemaphore {  }","parent":null,"children":[{"krate":0,"index":1438}],"decl_id":null,"docs":" A futures-aware semaphore.\n","sig":null,"attributes":[{"value":"/ A futures-aware semaphore.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":235908,"byte_end":235938,"line_start":432,"line_end":432,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237814,"byte_end":237817,"line_start":470,"line_end":470,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericSemaphore<MutexType>>::new","value":"pub fn new(bool, usize) -> GenericSemaphore<MutexType>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new futures-aware semaphore.","sig":null,"attributes":[{"value":"/ Creates a new futures-aware semaphore.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236708,"byte_end":236750,"line_start":452,"line_end":452,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236755,"byte_end":236758,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ `is_fair` defines whether the `Semaphore` should behave be fair regarding the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236763,"byte_end":236844,"line_start":454,"line_end":454,"column_start":5,"column_end":86}},{"value":"/ order of waiters. A fair `Semaphore` will only allow the oldest waiter on","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236849,"byte_end":236926,"line_start":455,"line_end":455,"column_start":5,"column_end":82}},{"value":"/ a `Semaphore` to retry acquiring it once it's available again.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236931,"byte_end":236997,"line_start":456,"line_end":456,"column_start":5,"column_end":71}},{"value":"/ Other waiters must wait until either this acquire attempt completes, and","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237002,"byte_end":237078,"line_start":457,"line_end":457,"column_start":5,"column_end":81}},{"value":"/ the `Semaphore` has enough permits after that, or until the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237083,"byte_end":237146,"line_start":458,"line_end":458,"column_start":5,"column_end":68}},{"value":"/ [`SemaphoreAcquireFuture`] which tried to acquire the `Semaphore` is dropped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237151,"byte_end":237232,"line_start":459,"line_end":459,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237237,"byte_end":237240,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ If the `Semaphore` isn't fair, waiters that wait for a high amount of","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237245,"byte_end":237318,"line_start":461,"line_end":461,"column_start":5,"column_end":78}},{"value":"/ permits might never succeed since the permits might be stolen in between","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237323,"byte_end":237399,"line_start":462,"line_end":462,"column_start":5,"column_end":81}},{"value":"/ by other waiters. Therefore use-cases which make use of very different","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237404,"byte_end":237478,"line_start":463,"line_end":463,"column_start":5,"column_end":79}},{"value":"/ amount of permits per acquire should use fair semaphores.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237483,"byte_end":237544,"line_start":464,"line_end":464,"column_start":5,"column_end":66}},{"value":"/ For use-cases where each `acquire()` tries to acquire the same amount of","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237549,"byte_end":237625,"line_start":465,"line_end":465,"column_start":5,"column_end":81}},{"value":"/ permits an unfair `Semaphore` might provide throughput advantages.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237630,"byte_end":237700,"line_start":466,"line_end":466,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237705,"byte_end":237708,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ `permits` is the amount of permits that a semaphore should hold when","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237713,"byte_end":237785,"line_start":468,"line_end":468,"column_start":5,"column_end":77}},{"value":"/ created.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":237790,"byte_end":237802,"line_start":469,"line_end":469,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238369,"byte_end":238376,"line_start":482,"line_end":482,"column_start":12,"column_end":19},"name":"acquire","qualname":"<GenericSemaphore<MutexType>>::acquire","value":"pub fn acquire(&Self, usize) -> GenericSemaphoreAcquireFuture<, MutexType>","parent":null,"children":[],"decl_id":null,"docs":" Acquire a certain amount of permits on a semaphore asynchronously.","sig":null,"attributes":[{"value":"/ Acquire a certain amount of permits on a semaphore asynchronously.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238020,"byte_end":238090,"line_start":476,"line_end":476,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238095,"byte_end":238098,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ This method returns a future that will resolve once the given amount of","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238103,"byte_end":238178,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"/ permits have been acquired.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238183,"byte_end":238214,"line_start":479,"line_end":479,"column_start":5,"column_end":36}},{"value":"/ The Future will resolve to a [`GenericSemaphoreReleaser`], which will","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238219,"byte_end":238292,"line_start":480,"line_end":480,"column_start":5,"column_end":78}},{"value":"/ release all acquired permits automatically when dropped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238297,"byte_end":238357,"line_start":481,"line_end":481,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239005,"byte_end":239016,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"try_acquire","qualname":"<GenericSemaphore<MutexType>>::try_acquire","value":"pub fn try_acquire(&Self, usize)\n-> Option<GenericSemaphoreReleaser<, MutexType>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to acquire a certain amount of permits on a semaphore.","sig":null,"attributes":[{"value":"/ Tries to acquire a certain amount of permits on a semaphore.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238689,"byte_end":238753,"line_start":493,"line_end":493,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238758,"byte_end":238761,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ If acquiring the permits is successful, a [`GenericSemaphoreReleaser`]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238766,"byte_end":238840,"line_start":495,"line_end":495,"column_start":5,"column_end":79}},{"value":"/ will be returned, which will release all acquired permits automatically","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238845,"byte_end":238920,"line_start":496,"line_end":496,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238925,"byte_end":238942,"line_start":497,"line_end":497,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238947,"byte_end":238950,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Otherwise `None` will be returned.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":238955,"byte_end":238993,"line_start":499,"line_end":499,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239912,"byte_end":239919,"line_start":524,"line_end":524,"column_start":12,"column_end":19},"name":"release","qualname":"<GenericSemaphore<MutexType>>::release","value":"pub fn release(&Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Releases the given amount of permits back to the semaphore.","sig":null,"attributes":[{"value":"/ Releases the given amount of permits back to the semaphore.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239363,"byte_end":239426,"line_start":514,"line_end":514,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239431,"byte_end":239434,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This method should in most cases not be used, since the","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239439,"byte_end":239498,"line_start":516,"line_end":516,"column_start":5,"column_end":64}},{"value":"/ [`GenericSemaphoreReleaser`] which is obtained when acquiring a Semaphore","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239503,"byte_end":239580,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/ will automatically release the obtained permits again.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239585,"byte_end":239643,"line_start":518,"line_end":518,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239648,"byte_end":239651,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ Therefore this method should only be used if the automatic release was","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239656,"byte_end":239730,"line_start":520,"line_end":520,"column_start":5,"column_end":79}},{"value":"/ disabled by calling [`GenericSemaphoreReleaser::disarm`],","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239735,"byte_end":239796,"line_start":521,"line_end":521,"column_start":5,"column_end":66}},{"value":"/ or when the amount of permits in the Semaphore","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239801,"byte_end":239851,"line_start":522,"line_end":522,"column_start":5,"column_end":55}},{"value":"/ should increase from the initial amount.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":239856,"byte_end":239900,"line_start":523,"line_end":523,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240086,"byte_end":240093,"line_start":529,"line_end":529,"column_start":12,"column_end":19},"name":"permits","qualname":"<GenericSemaphore<MutexType>>::permits","value":"pub fn permits(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of permits that are available on the semaphore\n","sig":null,"attributes":[{"value":"/ Returns the amount of permits that are available on the semaphore","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240005,"byte_end":240074,"line_start":528,"line_end":528,"column_start":5,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240271,"byte_end":240285,"line_start":537,"line_end":537,"column_start":10,"column_end":24},"name":"LocalSemaphore","qualname":"::sync::semaphore::LocalSemaphore","value":"GenericSemaphore<NoopLock>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSemaphore`] which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericSemaphore`] which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240209,"byte_end":240261,"line_start":536,"line_end":536,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1454},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240384,"byte_end":240406,"line_start":539,"line_end":539,"column_start":10,"column_end":32},"name":"LocalSemaphoreReleaser","qualname":"::sync::semaphore::LocalSemaphoreReleaser","value":"GenericSemaphoreReleaser","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSemaphoreReleaser`] for [`LocalSemaphore`].\n","sig":null,"attributes":[{"value":"/ A [`GenericSemaphoreReleaser`] for [`LocalSemaphore`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240316,"byte_end":240374,"line_start":538,"line_end":538,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240526,"byte_end":240553,"line_start":541,"line_end":541,"column_start":10,"column_end":37},"name":"LocalSemaphoreAcquireFuture","qualname":"::sync::semaphore::LocalSemaphoreAcquireFuture","value":"GenericSemaphoreAcquireFuture","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSemaphoreAcquireFuture`] for [`LocalSemaphore`].\n","sig":null,"attributes":[{"value":"/ A [`GenericSemaphoreAcquireFuture`] for [`LocalSemaphore`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240453,"byte_end":240516,"line_start":540,"line_end":540,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1460},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240806,"byte_end":240815,"line_start":551,"line_end":551,"column_start":14,"column_end":23},"name":"Semaphore","qualname":"::sync::semaphore::if_alloc::Semaphore","value":"GenericSemaphore<parking_lot::RawMutex>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSemaphore`] backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericSemaphore`] backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240739,"byte_end":240792,"line_start":550,"line_end":550,"column_start":5,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240930,"byte_end":240947,"line_start":553,"line_end":553,"column_start":14,"column_end":31},"name":"SemaphoreReleaser","qualname":"::sync::semaphore::if_alloc::SemaphoreReleaser","value":"GenericSemaphoreReleaser","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSemaphoreReleaser`] for [`Semaphore`].\n","sig":null,"attributes":[{"value":"/ A [`GenericSemaphoreReleaser`] for [`Semaphore`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":240863,"byte_end":240916,"line_start":552,"line_end":552,"column_start":5,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":241091,"byte_end":241113,"line_start":556,"line_end":556,"column_start":14,"column_end":36},"name":"SemaphoreAcquireFuture","qualname":"::sync::semaphore::if_alloc::SemaphoreAcquireFuture","value":"GenericSemaphoreAcquireFuture","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericSemaphoreAcquireFuture`] for [`Semaphore`].\n","sig":null,"attributes":[{"value":"/ A [`GenericSemaphoreAcquireFuture`] for [`Semaphore`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":241019,"byte_end":241077,"line_start":555,"line_end":555,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timer","qualname":"::timer","value":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636}],"decl_id":null,"docs":" Asynchronous timers.","sig":null,"attributes":[{"value":"/ Asynchronous timers.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241243,"byte_end":241267,"line_start":1,"line_end":1,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241268,"byte_end":241271,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides a timer implementation which returns awaitable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241272,"byte_end":241343,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ `Future`s.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241344,"byte_end":241358,"line_start":4,"line_end":4,"column_start":1,"column_end":15}},{"value":"/ The timer can work with a configurable clock source. In order to utilize","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241359,"byte_end":241435,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ the system clock, a global instance `StdClock` can be utilized.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\mod.rs","byte_start":241436,"byte_end":241503,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":241987,"byte_end":241992,"line_start":8,"line_end":8,"column_start":11,"column_end":16},"name":"Clock","qualname":"::timer::clock::Clock","value":"Clock: Sync","parent":null,"children":[{"krate":0,"index":1483}],"decl_id":null,"docs":" A monotonic source of time.","sig":null,"attributes":[{"value":"/ A monotonic source of time.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":241885,"byte_end":241916,"line_start":5,"line_end":5,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":241917,"byte_end":241920,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Clocks must always returning increasing timestamps.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":241921,"byte_end":241976,"line_start":7,"line_end":7,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242255,"byte_end":242258,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"now","qualname":"::timer::clock::Clock::now","value":"pub fn now(&Self) -> u64","parent":{"krate":0,"index":1482},"children":[],"decl_id":null,"docs":" Returns a timestamp in milliseconds which represents the current time\n according to the clock.","sig":null,"attributes":[{"value":"/ Returns a timestamp in milliseconds which represents the current time","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242005,"byte_end":242078,"line_start":9,"line_end":9,"column_start":5,"column_end":78}},{"value":"/ according to the clock.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242083,"byte_end":242110,"line_start":10,"line_end":10,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242115,"byte_end":242118,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ Clocks must only return timestamps that are bigger or equal than what","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242123,"byte_end":242196,"line_start":12,"line_end":12,"column_start":5,"column_end":78}},{"value":"/ they returned on the last call to `now()`.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242201,"byte_end":242247,"line_start":13,"line_end":13,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242782,"byte_end":242791,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"MockClock","qualname":"::timer::clock::MockClock","value":"MockClock {  }","parent":null,"children":[{"krate":0,"index":1485}],"decl_id":null,"docs":" A [`Clock`] which can be set to arbitrary timestamps for testing purposes.","sig":null,"attributes":[{"value":"/ A [`Clock`] which can be set to arbitrary timestamps for testing purposes.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242277,"byte_end":242355,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242356,"byte_end":242359,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ It can be used in a test case as demonstrated in the following example:","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242360,"byte_end":242435,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242436,"byte_end":242443,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use futures_intrusive::timer::MockClock;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242444,"byte_end":242488,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242489,"byte_end":242520,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ # use futures_intrusive::timer::TimerService;","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242521,"byte_end":242570,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242571,"byte_end":242574,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ static TEST_CLOCK: MockClock = MockClock::new();","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242575,"byte_end":242627,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ TEST_CLOCK.set_time(2300); // Set the current time","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242628,"byte_end":242682,"line_start":26,"line_end":26,"column_start":1,"column_end":55}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242683,"byte_end":242714,"line_start":27,"line_end":27,"column_start":1,"column_end":32}},{"value":"/ let timer = TimerService::new(&TEST_CLOCK);","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242715,"byte_end":242762,"line_start":28,"line_end":28,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242763,"byte_end":242770,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243183,"byte_end":243186,"line_start":44,"line_end":44,"column_start":18,"column_end":21},"name":"new","qualname":"<MockClock>::new","value":"pub const fn new() -> MockClock","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of the [`MockClock`], which is initialized to\n timestamp 0.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of the [`MockClock`], which is initialized to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243072,"byte_end":243144,"line_start":42,"line_end":42,"column_start":5,"column_end":77}},{"value":"/ timestamp 0.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243149,"byte_end":243165,"line_start":43,"line_end":43,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243368,"byte_end":243376,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"set_time","qualname":"<MockClock>::set_time","value":"pub fn set_time(&Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Sets the current timestamp inside to [`MockClock`] to the given value\n","sig":null,"attributes":[{"value":"/ Sets the current timestamp inside to [`MockClock`] to the given value","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243283,"byte_end":243356,"line_start":50,"line_end":50,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1496},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244008,"byte_end":244016,"line_start":73,"line_end":73,"column_start":16,"column_end":24},"name":"StdClock","qualname":"::timer::clock::if_std::StdClock","value":"StdClock {  }","parent":null,"children":[{"krate":0,"index":1497}],"decl_id":null,"docs":" A Clock that makes use of the Standard libraries [`std::time::Instant`]\n functionality in order to generate monotonically increasing timestamps.\n","sig":null,"attributes":[{"value":"/ A Clock that makes use of the Standard libraries [`std::time::Instant`]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243837,"byte_end":243912,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ functionality in order to generate monotonically increasing timestamps.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243917,"byte_end":243992,"line_start":72,"line_end":72,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244305,"byte_end":244308,"line_start":85,"line_end":85,"column_start":16,"column_end":19},"name":"new","qualname":"<StdClock>::new","value":"pub fn new() -> StdClock","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`StdClock`]\n","sig":null,"attributes":[{"value":"/ Creates a new [`StdClock`]","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244259,"byte_end":244289,"line_start":84,"line_end":84,"column_start":9,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":1557},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251027,"byte_end":251037,"line_start":192,"line_end":192,"column_start":11,"column_end":21},"name":"LocalTimer","qualname":"::timer::timer::LocalTimer","value":"LocalTimer","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1559}],"decl_id":null,"docs":" An asynchronously awaitable timer which is bound to a thread.","sig":null,"attributes":[{"value":"/ An asynchronously awaitable timer which is bound to a thread.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250705,"byte_end":250770,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250771,"byte_end":250774,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ The timer operates on millisecond precision and makes use of a configurable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250775,"byte_end":250854,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ clock source.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250855,"byte_end":250872,"line_start":188,"line_end":188,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250873,"byte_end":250876,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The timer allows to wait asynchronously either for a certain duration,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250877,"byte_end":250951,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ or until the provided [`Clock`] reaches a certain timestamp.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":250952,"byte_end":251016,"line_start":191,"line_end":191,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251119,"byte_end":251124,"line_start":194,"line_end":194,"column_start":8,"column_end":13},"name":"delay","qualname":"::timer::timer::LocalTimer::delay","value":"pub fn delay(&Self, Duration) -> LocalTimerFuture","parent":{"krate":0,"index":1557},"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled after the given `Duration`\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled after the given `Duration`","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251044,"byte_end":251111,"line_start":193,"line_end":193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251288,"byte_end":251296,"line_start":198,"line_end":198,"column_start":8,"column_end":16},"name":"deadline","qualname":"::timer::timer::LocalTimer::deadline","value":"pub fn deadline(&Self, u64) -> LocalTimerFuture","parent":{"krate":0,"index":1557},"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when the utilized [`Clock`] reaches\n the given timestamp.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when the utilized [`Clock`] reaches","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251175,"byte_end":251251,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ the given timestamp.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251256,"byte_end":251280,"line_start":197,"line_end":197,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":1560},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251651,"byte_end":251656,"line_start":208,"line_end":208,"column_start":11,"column_end":16},"name":"Timer","qualname":"::timer::timer::Timer","value":"Timer","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562}],"decl_id":null,"docs":" An asynchronously awaitable thread-safe timer.","sig":null,"attributes":[{"value":"/ An asynchronously awaitable thread-safe timer.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251344,"byte_end":251394,"line_start":201,"line_end":201,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251395,"byte_end":251398,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ The timer operates on millisecond precision and makes use of a configurable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251399,"byte_end":251478,"line_start":203,"line_end":203,"column_start":1,"column_end":80}},{"value":"/ clock source.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251479,"byte_end":251496,"line_start":204,"line_end":204,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251497,"byte_end":251500,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ The timer allows to wait asynchronously either for a certain duration,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251501,"byte_end":251575,"line_start":206,"line_end":206,"column_start":1,"column_end":75}},{"value":"/ or until the provided [`Clock`] reaches a certain timestamp.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251576,"byte_end":251640,"line_start":207,"line_end":207,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251738,"byte_end":251743,"line_start":210,"line_end":210,"column_start":8,"column_end":13},"name":"delay","qualname":"::timer::timer::Timer::delay","value":"pub fn delay(&Self, Duration) -> TimerFuture","parent":{"krate":0,"index":1560},"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled after the given `Duration`\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled after the given `Duration`","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251663,"byte_end":251730,"line_start":209,"line_end":209,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251902,"byte_end":251910,"line_start":214,"line_end":214,"column_start":8,"column_end":16},"name":"deadline","qualname":"::timer::timer::Timer::deadline","value":"pub fn deadline(&Self, u64) -> TimerFuture","parent":{"krate":0,"index":1560},"children":[],"decl_id":null,"docs":" Returns a future that gets fulfilled when the utilized [`Clock`] reaches\n the given timestamp.\n","sig":null,"attributes":[{"value":"/ Returns a future that gets fulfilled when the utilized [`Clock`] reaches","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251789,"byte_end":251865,"line_start":212,"line_end":212,"column_start":5,"column_end":81}},{"value":"/ the given timestamp.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251870,"byte_end":251894,"line_start":213,"line_end":213,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252645,"byte_end":252664,"line_start":232,"line_end":232,"column_start":12,"column_end":31},"name":"GenericTimerService","qualname":"::timer::timer::GenericTimerService","value":"GenericTimerService {  }","parent":null,"children":[{"krate":0,"index":1565}],"decl_id":null,"docs":" An asynchronously awaitable timer.","sig":null,"attributes":[{"value":"/ An asynchronously awaitable timer.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251953,"byte_end":251991,"line_start":217,"line_end":217,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251992,"byte_end":251995,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ The timer operates on millisecond precision and makes use of a configurable","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":251996,"byte_end":252075,"line_start":219,"line_end":219,"column_start":1,"column_end":80}},{"value":"/ clock source.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252076,"byte_end":252093,"line_start":220,"line_end":220,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252094,"byte_end":252097,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ The timer allows to wait asynchronously either for a certain duration,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252098,"byte_end":252172,"line_start":222,"line_end":222,"column_start":1,"column_end":75}},{"value":"/ or until the provided [`Clock`] reaches a certain timestamp.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252173,"byte_end":252237,"line_start":223,"line_end":223,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252238,"byte_end":252241,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ In order to unblock tasks that are waiting on the timer,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252242,"byte_end":252302,"line_start":225,"line_end":225,"column_start":1,"column_end":61}},{"value":"/ [`check_expirations`](GenericTimerService::check_expirations)","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252303,"byte_end":252368,"line_start":226,"line_end":226,"column_start":1,"column_end":66}},{"value":"/ must be called in regular intervals on this timer service.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252369,"byte_end":252431,"line_start":227,"line_end":227,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252432,"byte_end":252435,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ The timer can either be running on a separate timer thread (in case a","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252436,"byte_end":252509,"line_start":229,"line_end":229,"column_start":1,"column_end":74}},{"value":"/ thread-safe timer type is utilize), or it can be integrated into an executor","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252510,"byte_end":252590,"line_start":230,"line_end":230,"column_start":1,"column_end":81}},{"value":"/ in order to minimize context switches.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252591,"byte_end":252633,"line_start":231,"line_end":231,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253735,"byte_end":253738,"line_start":263,"line_end":263,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericTimerService<MutexType>>::new","value":"pub fn new(&'static Clock) -> GenericTimerService<MutexType>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Timer in the given state.","sig":null,"attributes":[{"value":"/ Creates a new Timer in the given state.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253318,"byte_end":253361,"line_start":254,"line_end":254,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253366,"byte_end":253369,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ The Timer will query the provided [`Clock`] instance for the current","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253374,"byte_end":253446,"line_start":256,"line_end":256,"column_start":5,"column_end":77}},{"value":"/ time whenever required.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253451,"byte_end":253478,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253483,"byte_end":253486,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ In order to create a create a clock which utilizes system time,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253491,"byte_end":253558,"line_start":259,"line_end":259,"column_start":5,"column_end":72}},{"value":"/ [`StdClock`](super::StdClock) can be utilized.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253563,"byte_end":253613,"line_start":260,"line_end":260,"column_start":5,"column_end":55}},{"value":"/ In order to simulate time for test purposes,","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253618,"byte_end":253666,"line_start":261,"line_end":261,"column_start":5,"column_end":53}},{"value":"/ [`MockClock`](super::MockClock) can be utilized.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253671,"byte_end":253723,"line_start":262,"line_end":262,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254359,"byte_end":254374,"line_start":277,"line_end":277,"column_start":12,"column_end":27},"name":"next_expiration","qualname":"<GenericTimerService<MutexType>>::next_expiration","value":"pub fn next_expiration(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns a timestamp when the next timer expires.","sig":null,"attributes":[{"value":"/ Returns a timestamp when the next timer expires.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253921,"byte_end":253973,"line_start":269,"line_end":269,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253978,"byte_end":253981,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ For thread-safe timers, the returned value is not precise and subject to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253986,"byte_end":254062,"line_start":271,"line_end":271,"column_start":5,"column_end":81}},{"value":"/ race-conditions, since other threads can add timer in the meantime.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254067,"byte_end":254138,"line_start":272,"line_end":272,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254143,"byte_end":254146,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Therefore adding any timer to the [`GenericTimerService`] should  also","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254151,"byte_end":254225,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ make sure to wake up the executor which polls for timeouts, in order to","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254230,"byte_end":254305,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ let it capture the latest change.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254310,"byte_end":254347,"line_start":276,"line_end":276,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254588,"byte_end":254605,"line_start":283,"line_end":283,"column_start":12,"column_end":29},"name":"check_expirations","qualname":"<GenericTimerService<MutexType>>::check_expirations","value":"pub fn check_expirations(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Checks whether any of the attached [`TimerFuture`]s has expired.\n In this case the associated task is woken up.\n","sig":null,"attributes":[{"value":"/ Checks whether any of the attached [`TimerFuture`]s has expired.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254454,"byte_end":254522,"line_start":281,"line_end":281,"column_start":5,"column_end":73}},{"value":"/ In this case the associated task is woken up.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":254527,"byte_end":254576,"line_start":282,"line_end":282,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":256886,"byte_end":256902,"line_start":351,"line_end":351,"column_start":12,"column_end":28},"name":"LocalTimerFuture","qualname":"::timer::timer::LocalTimerFuture","value":"LocalTimerFuture {  }","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"decl_id":null,"docs":" A Future that is resolved once the requested time has elapsed.\n","sig":null,"attributes":[{"value":"/ A Future that is resolved once the requested time has elapsed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":256759,"byte_end":256825,"line_start":349,"line_end":349,"column_start":1,"column_end":67}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":256826,"byte_end":256874,"line_start":350,"line_end":350,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1608},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258872,"byte_end":258883,"line_start":410,"line_end":410,"column_start":12,"column_end":23},"name":"TimerFuture","qualname":"::timer::timer::TimerFuture","value":"TimerFuture {  }","parent":null,"children":[{"krate":0,"index":1610}],"decl_id":null,"docs":" A Future that is resolved once the requested time has elapsed.\n","sig":null,"attributes":[{"value":"/ A Future that is resolved once the requested time has elapsed.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258745,"byte_end":258811,"line_start":408,"line_end":408,"column_start":1,"column_end":67}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258812,"byte_end":258860,"line_start":409,"line_end":409,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1624},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259991,"byte_end":260008,"line_start":447,"line_end":447,"column_start":10,"column_end":27},"name":"LocalTimerService","qualname":"::timer::timer::LocalTimerService","value":"GenericTimerService<NoopLock>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericTimerService`] implementation which is not thread-safe.\n","sig":null,"attributes":[{"value":"/ A [`GenericTimerService`] implementation which is not thread-safe.","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259911,"byte_end":259981,"line_start":446,"line_end":446,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":260257,"byte_end":260269,"line_start":456,"line_end":456,"column_start":14,"column_end":26},"name":"TimerService","qualname":"::timer::timer::if_alloc::TimerService","value":"GenericTimerService<parking_lot::RawMutex>","parent":null,"children":[],"decl_id":null,"docs":" A [`GenericTimerService`] implementation backed by [`parking_lot`].\n","sig":null,"attributes":[{"value":"/ A [`GenericTimerService`] implementation backed by [`parking_lot`].","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":260172,"byte_end":260243,"line_start":455,"line_end":455,"column_start":5,"column_end":76}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","byte_start":10001,"byte_end":10009,"line_start":13,"line_end":13,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14306,"byte_end":14314,"line_start":61,"line_end":61,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14671,"byte_end":14679,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14956,"byte_end":14964,"line_start":88,"line_end":88,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":16643,"byte_end":16651,"line_start":153,"line_end":153,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17838,"byte_end":17850,"line_start":188,"line_end":188,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":18179,"byte_end":18191,"line_start":200,"line_end":200,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19753,"byte_end":19767,"line_start":258,"line_end":258,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":20102,"byte_end":20116,"line_start":270,"line_end":270,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":23588,"byte_end":23596,"line_start":23,"line_end":23,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":23855,"byte_end":23863,"line_start":35,"line_end":35,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":23968,"byte_end":23976,"line_start":43,"line_end":43,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":24285,"byte_end":24295,"line_start":57,"line_end":57,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":48783,"byte_end":48791,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":49956,"byte_end":49964,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":50510,"byte_end":50518,"line_start":88,"line_end":88,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":50623,"byte_end":50631,"line_start":96,"line_end":96,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":54979,"byte_end":54990,"line_start":233,"line_end":233,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64687,"byte_end":64702,"line_start":20,"line_end":20,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65335,"byte_end":65347,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66525,"byte_end":66536,"line_start":19,"line_end":19,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":67683,"byte_end":67701,"line_start":59,"line_end":59,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":68619,"byte_end":68637,"line_start":91,"line_end":91,"column_start":30,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":68934,"byte_end":68952,"line_start":103,"line_end":103,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70999,"byte_end":71019,"line_start":163,"line_end":163,"column_start":9,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":71091,"byte_end":71111,"line_start":168,"line_end":168,"column_start":9,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":71302,"byte_end":71322,"line_start":175,"line_end":175,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":72395,"byte_end":72415,"line_start":204,"line_end":204,"column_start":40,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":72546,"byte_end":72566,"line_start":210,"line_end":210,"column_start":33,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73909,"byte_end":73926,"line_start":240,"line_end":240,"column_start":9,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73998,"byte_end":74015,"line_start":245,"line_end":245,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":74192,"byte_end":74209,"line_start":252,"line_end":252,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":74625,"byte_end":74642,"line_start":266,"line_end":266,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76148,"byte_end":76165,"line_start":306,"line_end":306,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76296,"byte_end":76313,"line_start":312,"line_end":312,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":77923,"byte_end":77943,"line_start":350,"line_end":350,"column_start":17,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":78027,"byte_end":78047,"line_start":354,"line_end":354,"column_start":49,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":78270,"byte_end":78290,"line_start":360,"line_end":360,"column_start":39,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":79700,"byte_end":79720,"line_start":396,"line_end":396,"column_start":44,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":79883,"byte_end":79903,"line_start":402,"line_end":402,"column_start":37,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":81258,"byte_end":81275,"line_start":430,"line_end":430,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":82012,"byte_end":82029,"line_start":447,"line_end":447,"column_start":56,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":82096,"byte_end":82113,"line_start":449,"line_end":449,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":82333,"byte_end":82350,"line_start":455,"line_end":455,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":84220,"byte_end":84237,"line_start":499,"line_end":499,"column_start":44,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":84400,"byte_end":84417,"line_start":505,"line_end":505,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":86204,"byte_end":86216,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90826,"byte_end":90847,"line_start":155,"line_end":155,"column_start":9,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90997,"byte_end":91018,"line_start":160,"line_end":160,"column_start":9,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91092,"byte_end":91113,"line_start":165,"line_end":165,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91296,"byte_end":91317,"line_start":172,"line_end":172,"column_start":30,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92710,"byte_end":92731,"line_start":212,"line_end":212,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94131,"byte_end":94163,"line_start":260,"line_end":260,"column_start":17,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95812,"byte_end":95832,"line_start":309,"line_end":309,"column_start":49,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":96113,"byte_end":96135,"line_start":318,"line_end":318,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":96406,"byte_end":96426,"line_start":327,"line_end":327,"column_start":37,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":96789,"byte_end":96811,"line_start":338,"line_end":338,"column_start":37,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98416,"byte_end":98436,"line_start":384,"line_end":384,"column_start":28,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99041,"byte_end":99063,"line_start":399,"line_end":399,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":101994,"byte_end":102006,"line_start":40,"line_end":40,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106730,"byte_end":106760,"line_start":159,"line_end":159,"column_start":9,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106910,"byte_end":106940,"line_start":164,"line_end":164,"column_start":9,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107014,"byte_end":107044,"line_start":169,"line_end":169,"column_start":9,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107236,"byte_end":107266,"line_start":176,"line_end":176,"column_start":30,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108706,"byte_end":108736,"line_start":219,"line_end":219,"column_start":9,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":110223,"byte_end":110255,"line_start":270,"line_end":270,"column_start":17,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":112063,"byte_end":112094,"line_start":322,"line_end":322,"column_start":38,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":112409,"byte_end":112438,"line_start":335,"line_end":335,"column_start":17,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":112762,"byte_end":112793,"line_start":346,"line_end":346,"column_start":17,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":113095,"byte_end":113124,"line_start":356,"line_end":356,"column_start":37,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":113509,"byte_end":113540,"line_start":368,"line_end":368,"column_start":37,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115476,"byte_end":115505,"line_start":417,"line_end":417,"column_start":28,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":116132,"byte_end":116163,"line_start":433,"line_end":433,"column_start":28,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118612,"byte_end":118619,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":119428,"byte_end":119446,"line_start":52,"line_end":52,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":121321,"byte_end":121339,"line_start":106,"line_end":106,"column_start":9,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":121418,"byte_end":121436,"line_start":111,"line_end":111,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":121632,"byte_end":121650,"line_start":118,"line_end":118,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":122773,"byte_end":122791,"line_start":151,"line_end":151,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":122929,"byte_end":122947,"line_start":158,"line_end":158,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":124257,"byte_end":124269,"line_start":194,"line_end":194,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129354,"byte_end":129382,"line_start":327,"line_end":327,"column_start":9,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129532,"byte_end":129560,"line_start":332,"line_end":332,"column_start":9,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129634,"byte_end":129662,"line_start":337,"line_end":337,"column_start":9,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129852,"byte_end":129880,"line_start":344,"line_end":344,"column_start":30,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":132087,"byte_end":132115,"line_start":407,"line_end":407,"column_start":9,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":133892,"byte_end":133931,"line_start":461,"line_end":461,"column_start":17,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135935,"byte_end":135953,"line_start":507,"line_end":507,"column_start":17,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":136037,"byte_end":136055,"line_start":511,"line_end":511,"column_start":49,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":136276,"byte_end":136294,"line_start":517,"line_end":517,"column_start":39,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":137720,"byte_end":137738,"line_start":553,"line_end":553,"column_start":44,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":137901,"byte_end":137919,"line_start":559,"line_end":559,"column_start":37,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":139474,"byte_end":139492,"line_start":599,"line_end":599,"column_start":49,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":139793,"byte_end":139813,"line_start":609,"line_end":609,"column_start":49,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":140105,"byte_end":140123,"line_start":619,"line_end":619,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":140655,"byte_end":140673,"line_start":636,"line_end":636,"column_start":37,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":141244,"byte_end":141264,"line_start":652,"line_end":652,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":141800,"byte_end":141820,"line_start":669,"line_end":669,"column_start":37,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":143797,"byte_end":143815,"line_start":723,"line_end":723,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144442,"byte_end":144462,"line_start":739,"line_end":739,"column_start":28,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":149679,"byte_end":149691,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161524,"byte_end":161538,"line_start":372,"line_end":372,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161733,"byte_end":161747,"line_start":379,"line_end":379,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161859,"byte_end":161873,"line_start":386,"line_end":386,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162080,"byte_end":162094,"line_start":395,"line_end":395,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165801,"byte_end":165815,"line_start":497,"line_end":497,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":166490,"byte_end":166504,"line_start":525,"line_end":525,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167839,"byte_end":167852,"line_start":573,"line_end":573,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":169797,"byte_end":169810,"line_start":627,"line_end":627,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":172480,"byte_end":172505,"line_start":694,"line_end":694,"column_start":17,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":173319,"byte_end":173344,"line_start":718,"line_end":718,"column_start":17,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":175124,"byte_end":175137,"line_start":767,"line_end":767,"column_start":52,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":175451,"byte_end":175466,"line_start":777,"line_end":777,"column_start":52,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":175771,"byte_end":175784,"line_start":787,"line_end":787,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":176329,"byte_end":176342,"line_start":804,"line_end":804,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":176931,"byte_end":176946,"line_start":820,"line_end":820,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":177495,"byte_end":177510,"line_start":837,"line_end":837,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179549,"byte_end":179562,"line_start":893,"line_end":893,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181562,"byte_end":181577,"line_start":933,"line_end":933,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183834,"byte_end":183846,"line_start":988,"line_end":988,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186236,"byte_end":186248,"line_start":1044,"line_end":1044,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":191074,"byte_end":191088,"line_start":35,"line_end":35,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":191407,"byte_end":191417,"line_start":51,"line_end":51,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195581,"byte_end":195604,"line_start":157,"line_end":157,"column_start":9,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195746,"byte_end":195769,"line_start":162,"line_end":162,"column_start":9,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195837,"byte_end":195860,"line_start":167,"line_end":167,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196032,"byte_end":196055,"line_start":174,"line_end":174,"column_start":27,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":197944,"byte_end":197969,"line_start":233,"line_end":233,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":198045,"byte_end":198070,"line_start":238,"line_end":238,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":198274,"byte_end":198299,"line_start":246,"line_end":246,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":199338,"byte_end":199363,"line_start":276,"line_end":276,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":199500,"byte_end":199525,"line_start":284,"line_end":284,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":201864,"byte_end":201878,"line_start":43,"line_end":43,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":202197,"byte_end":202207,"line_start":60,"line_end":60,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211420,"byte_end":211437,"line_start":283,"line_end":283,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211629,"byte_end":211646,"line_start":290,"line_end":290,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211900,"byte_end":211917,"line_start":300,"line_end":300,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212082,"byte_end":212099,"line_start":307,"line_end":307,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212848,"byte_end":212870,"line_start":326,"line_end":326,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212970,"byte_end":212992,"line_start":331,"line_end":331,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":213199,"byte_end":213221,"line_start":339,"line_end":339,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":214359,"byte_end":214381,"line_start":370,"line_end":370,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":214524,"byte_end":214546,"line_start":378,"line_end":378,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215417,"byte_end":215429,"line_start":406,"line_end":406,"column_start":9,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215583,"byte_end":215595,"line_start":411,"line_end":411,"column_start":9,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215687,"byte_end":215699,"line_start":416,"line_end":416,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215930,"byte_end":215942,"line_start":425,"line_end":425,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":219828,"byte_end":219842,"line_start":41,"line_end":41,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":220221,"byte_end":220235,"line_start":59,"line_end":59,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231081,"byte_end":231105,"line_start":306,"line_end":306,"column_start":9,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231289,"byte_end":231313,"line_start":313,"line_end":313,"column_start":27,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231847,"byte_end":231871,"line_start":327,"line_end":327,"column_start":36,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232867,"byte_end":232896,"line_start":352,"line_end":352,"column_start":9,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232972,"byte_end":233001,"line_start":357,"line_end":357,"column_start":9,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":233209,"byte_end":233238,"line_start":365,"line_end":365,"column_start":9,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":234689,"byte_end":234718,"line_start":403,"line_end":403,"column_start":9,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":234859,"byte_end":234888,"line_start":411,"line_end":411,"column_start":9,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236197,"byte_end":236213,"line_start":439,"line_end":439,"column_start":50,"column_end":66},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236354,"byte_end":236370,"line_start":441,"line_end":441,"column_start":50,"column_end":66},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236433,"byte_end":236449,"line_start":443,"line_end":443,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236674,"byte_end":236690,"line_start":451,"line_end":451,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242865,"byte_end":242874,"line_start":34,"line_end":34,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243056,"byte_end":243065,"line_start":41,"line_end":41,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1489},{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243653,"byte_end":243662,"line_start":60,"line_end":60,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244080,"byte_end":244088,"line_start":77,"line_end":77,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244240,"byte_end":244248,"line_start":83,"line_end":83,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244437,"byte_end":244445,"line_start":92,"line_end":92,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":245679,"byte_end":245694,"line_start":39,"line_end":39,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":245932,"byte_end":245947,"line_start":50,"line_end":50,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246197,"byte_end":246212,"line_start":58,"line_end":58,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246237,"byte_end":246252,"line_start":60,"line_end":60,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246489,"byte_end":246504,"line_start":70,"line_end":70,"column_start":14,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246866,"byte_end":246876,"line_start":84,"line_end":84,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1553}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252856,"byte_end":252875,"line_start":238,"line_end":238,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253011,"byte_end":253030,"line_start":243,"line_end":243,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253094,"byte_end":253113,"line_start":247,"line_end":247,"column_start":48,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253281,"byte_end":253300,"line_start":253,"line_end":253,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":255057,"byte_end":255076,"line_start":296,"line_end":296,"column_start":42,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":255686,"byte_end":255705,"line_start":313,"line_end":313,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":256396,"byte_end":256415,"line_start":335,"line_end":335,"column_start":43,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":257121,"byte_end":257137,"line_start":358,"line_end":358,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":257296,"byte_end":257312,"line_start":364,"line_end":364,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258262,"byte_end":258278,"line_start":391,"line_end":391,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258379,"byte_end":258395,"line_start":397,"line_end":397,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259135,"byte_end":259146,"line_start":417,"line_end":417,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259185,"byte_end":259196,"line_start":419,"line_end":419,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259350,"byte_end":259361,"line_start":425,"line_end":425,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259752,"byte_end":259763,"line_start":438,"line_end":438,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9502,"byte_end":9508,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":16}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9602,"byte_end":9609,"line_start":231,"line_end":231,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":188}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9619,"byte_end":9623,"line_start":232,"line_end":232,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1114}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\lib.rs","byte_start":9633,"byte_end":9638,"line_start":233,"line_end":233,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1477}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\noop_lock.rs","byte_start":10001,"byte_end":10009,"line_start":13,"line_end":13,"column_start":26,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1643},"to":{"krate":13,"index":19}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14306,"byte_end":14314,"line_start":61,"line_end":61,"column_start":33,"column_end":41},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14671,"byte_end":14679,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":14956,"byte_end":14964,"line_start":88,"line_end":88,"column_start":24,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":37},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":16643,"byte_end":16651,"line_start":153,"line_end":153,"column_start":21,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":17838,"byte_end":17850,"line_start":188,"line_end":188,"column_start":34,"column_end":46},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":18179,"byte_end":18191,"line_start":200,"line_end":200,"column_start":25,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":71},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":19753,"byte_end":19767,"line_start":258,"line_end":258,"column_start":34,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":88},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\buffer\\ring_buffer.rs","byte_start":20102,"byte_end":20116,"line_start":270,"line_end":270,"column_start":25,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":88},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":23588,"byte_end":23596,"line_start":23,"line_end":23,"column_start":9,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":23855,"byte_end":23863,"line_start":35,"line_end":35,"column_start":19,"column_end":27},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1947},"to":{"krate":2,"index":2229}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":23968,"byte_end":23976,"line_start":43,"line_end":43,"column_start":22,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1947},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_double_linked_list.rs","byte_start":24285,"byte_end":24295,"line_start":57,"line_end":57,"column_start":9,"column_end":19},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":48783,"byte_end":48791,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":155},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":49956,"byte_end":49964,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1963},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":50510,"byte_end":50518,"line_start":88,"line_end":88,"column_start":19,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1963},"to":{"krate":2,"index":2229}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":50623,"byte_end":50631,"line_start":96,"line_end":96,"column_start":22,"column_end":30},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1963},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\intrusive_pairing_heap.rs","byte_start":54979,"byte_end":54990,"line_start":233,"line_end":233,"column_start":14,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1974},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":64687,"byte_end":64702,"line_start":20,"line_end":20,"column_start":6,"column_end":21},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1993},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\error.rs","byte_start":65335,"byte_end":65347,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":66525,"byte_end":66536,"line_start":19,"line_end":19,"column_start":6,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":67683,"byte_end":67701,"line_start":59,"line_end":59,"column_start":6,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":68619,"byte_end":68637,"line_start":91,"line_end":91,"column_start":30,"column_end":48},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":219},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":68934,"byte_end":68952,"line_start":103,"line_end":103,"column_start":9,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":70999,"byte_end":71019,"line_start":163,"line_end":163,"column_start":9,"column_end":29},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":71091,"byte_end":71111,"line_start":168,"line_end":168,"column_start":9,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":71302,"byte_end":71322,"line_start":175,"line_end":175,"column_start":35,"column_end":55},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":72395,"byte_end":72415,"line_start":204,"line_end":204,"column_start":40,"column_end":60},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":238},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":72546,"byte_end":72566,"line_start":210,"line_end":210,"column_start":33,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73909,"byte_end":73926,"line_start":240,"line_end":240,"column_start":9,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":73998,"byte_end":74015,"line_start":245,"line_end":245,"column_start":9,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":74192,"byte_end":74209,"line_start":252,"line_end":252,"column_start":24,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":74625,"byte_end":74642,"line_start":266,"line_end":266,"column_start":35,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76148,"byte_end":76165,"line_start":306,"line_end":306,"column_start":40,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":270},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":76296,"byte_end":76313,"line_start":312,"line_end":312,"column_start":33,"column_end":50},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":77923,"byte_end":77943,"line_start":350,"line_end":350,"column_start":17,"column_end":37},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":78027,"byte_end":78047,"line_start":354,"line_end":354,"column_start":49,"column_end":69},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":78270,"byte_end":78290,"line_start":360,"line_end":360,"column_start":39,"column_end":59},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":79700,"byte_end":79720,"line_start":396,"line_end":396,"column_start":44,"column_end":64},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":311},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":79883,"byte_end":79903,"line_start":402,"line_end":402,"column_start":37,"column_end":57},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":81258,"byte_end":81275,"line_start":430,"line_end":430,"column_start":28,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":82012,"byte_end":82029,"line_start":447,"line_end":447,"column_start":56,"column_end":73},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":82096,"byte_end":82113,"line_start":449,"line_end":449,"column_start":49,"column_end":66},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":82333,"byte_end":82350,"line_start":455,"line_end":455,"column_start":39,"column_end":56},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":84220,"byte_end":84237,"line_start":499,"line_end":499,"column_start":44,"column_end":61},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":337},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\channel_future.rs","byte_start":84400,"byte_end":84417,"line_start":505,"line_end":505,"column_start":37,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":86204,"byte_end":86216,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90826,"byte_end":90847,"line_start":155,"line_end":155,"column_start":9,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":90997,"byte_end":91018,"line_start":160,"line_end":160,"column_start":9,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91092,"byte_end":91113,"line_start":165,"line_end":165,"column_start":9,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":91296,"byte_end":91317,"line_start":172,"line_end":172,"column_start":30,"column_end":51},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":92710,"byte_end":92731,"line_start":212,"line_end":212,"column_start":9,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":94131,"byte_end":94163,"line_start":260,"line_end":260,"column_start":17,"column_end":49},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":449},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":95812,"byte_end":95832,"line_start":309,"line_end":309,"column_start":49,"column_end":69},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":458},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":96113,"byte_end":96135,"line_start":318,"line_end":318,"column_start":49,"column_end":71},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":96406,"byte_end":96426,"line_start":327,"line_end":327,"column_start":37,"column_end":57},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":458},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":96789,"byte_end":96811,"line_start":338,"line_end":338,"column_start":37,"column_end":59},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":98416,"byte_end":98436,"line_start":384,"line_end":384,"column_start":28,"column_end":48},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot.rs","byte_start":99041,"byte_end":99063,"line_start":399,"line_end":399,"column_start":28,"column_end":50},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":101994,"byte_end":102006,"line_start":40,"line_end":40,"column_start":9,"column_end":21},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106730,"byte_end":106760,"line_start":159,"line_end":159,"column_start":9,"column_end":39},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":106910,"byte_end":106940,"line_start":164,"line_end":164,"column_start":9,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107014,"byte_end":107044,"line_start":169,"line_end":169,"column_start":9,"column_end":39},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":107236,"byte_end":107266,"line_start":176,"line_end":176,"column_start":30,"column_end":60},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":108706,"byte_end":108736,"line_start":219,"line_end":219,"column_start":9,"column_end":39},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":542},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":110223,"byte_end":110255,"line_start":270,"line_end":270,"column_start":17,"column_end":49},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":577},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":112063,"byte_end":112094,"line_start":322,"line_end":322,"column_start":38,"column_end":69},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":1732}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":112409,"byte_end":112438,"line_start":335,"line_end":335,"column_start":17,"column_end":46},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":586},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":112762,"byte_end":112793,"line_start":346,"line_end":346,"column_start":17,"column_end":48},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":113095,"byte_end":113124,"line_start":356,"line_end":356,"column_start":37,"column_end":66},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":586},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":113509,"byte_end":113540,"line_start":368,"line_end":368,"column_start":37,"column_end":68},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":115476,"byte_end":115505,"line_start":417,"line_end":417,"column_start":28,"column_end":57},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\oneshot_broadcast.rs","byte_start":116132,"byte_end":116163,"line_start":433,"line_end":433,"column_start":28,"column_end":59},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":118612,"byte_end":118619,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":119428,"byte_end":119446,"line_start":52,"line_end":52,"column_start":6,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":121321,"byte_end":121339,"line_start":106,"line_end":106,"column_start":9,"column_end":27},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":121418,"byte_end":121436,"line_start":111,"line_end":111,"column_start":9,"column_end":27},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":121632,"byte_end":121650,"line_start":118,"line_end":118,"column_start":42,"column_end":60},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":122773,"byte_end":122791,"line_start":151,"line_end":151,"column_start":9,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":670},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":122929,"byte_end":122947,"line_start":158,"line_end":158,"column_start":40,"column_end":58},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":670},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":124257,"byte_end":124269,"line_start":194,"line_end":194,"column_start":9,"column_end":21},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":704},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129354,"byte_end":129382,"line_start":327,"line_end":327,"column_start":9,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":718},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129532,"byte_end":129560,"line_start":332,"line_end":332,"column_start":9,"column_end":37},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":718},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129634,"byte_end":129662,"line_start":337,"line_end":337,"column_start":9,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":718},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":129852,"byte_end":129880,"line_start":344,"line_end":344,"column_start":30,"column_end":58},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":132087,"byte_end":132115,"line_start":407,"line_end":407,"column_start":9,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":718},"to":{"krate":0,"index":666}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":133892,"byte_end":133931,"line_start":461,"line_end":461,"column_start":17,"column_end":56},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":756},"to":{"krate":0,"index":666}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":135935,"byte_end":135953,"line_start":507,"line_end":507,"column_start":17,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":136037,"byte_end":136055,"line_start":511,"line_end":511,"column_start":49,"column_end":67},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":136276,"byte_end":136294,"line_start":517,"line_end":517,"column_start":39,"column_end":57},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":137720,"byte_end":137738,"line_start":553,"line_end":553,"column_start":44,"column_end":62},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":767},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":137901,"byte_end":137919,"line_start":559,"line_end":559,"column_start":37,"column_end":55},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":139474,"byte_end":139492,"line_start":599,"line_end":599,"column_start":49,"column_end":67},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":793},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":139793,"byte_end":139813,"line_start":609,"line_end":609,"column_start":49,"column_end":69},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":797},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":140105,"byte_end":140123,"line_start":619,"line_end":619,"column_start":38,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":793},"to":{"krate":2,"index":1732}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":140655,"byte_end":140673,"line_start":636,"line_end":636,"column_start":37,"column_end":55},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":793},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":141244,"byte_end":141264,"line_start":652,"line_end":652,"column_start":38,"column_end":58},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":797},"to":{"krate":2,"index":1732}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":141800,"byte_end":141820,"line_start":669,"line_end":669,"column_start":37,"column_end":57},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":797},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":143797,"byte_end":143815,"line_start":723,"line_end":723,"column_start":28,"column_end":46},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":793},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\state_broadcast.rs","byte_start":144442,"byte_end":144462,"line_start":739,"line_end":739,"column_start":28,"column_end":48},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":149679,"byte_end":149691,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161524,"byte_end":161538,"line_start":372,"line_end":372,"column_start":9,"column_end":23},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161733,"byte_end":161747,"line_start":379,"line_end":379,"column_start":9,"column_end":23},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":161859,"byte_end":161873,"line_start":386,"line_end":386,"column_start":9,"column_end":23},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":162080,"byte_end":162094,"line_start":395,"line_end":395,"column_start":33,"column_end":47},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":165801,"byte_end":165815,"line_start":497,"line_end":497,"column_start":9,"column_end":23},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":230}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":166490,"byte_end":166504,"line_start":525,"line_end":525,"column_start":9,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":167839,"byte_end":167852,"line_start":573,"line_end":573,"column_start":38,"column_end":51},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2112},"to":{"krate":15,"index":68}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":169797,"byte_end":169810,"line_start":627,"line_end":627,"column_start":43,"column_end":56},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2112},"to":{"krate":15,"index":82}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":172480,"byte_end":172505,"line_start":694,"line_end":694,"column_start":17,"column_end":42},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":993},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":173319,"byte_end":173344,"line_start":718,"line_end":718,"column_start":17,"column_end":42},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":993},"to":{"krate":0,"index":230}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":175124,"byte_end":175137,"line_start":767,"line_end":767,"column_start":52,"column_end":65},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":175451,"byte_end":175466,"line_start":777,"line_end":777,"column_start":52,"column_end":67},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1017},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":175771,"byte_end":175784,"line_start":787,"line_end":787,"column_start":41,"column_end":54},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":1732}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":176329,"byte_end":176342,"line_start":804,"line_end":804,"column_start":40,"column_end":53},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":176931,"byte_end":176946,"line_start":820,"line_end":820,"column_start":41,"column_end":56},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1017},"to":{"krate":2,"index":1732}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":177495,"byte_end":177510,"line_start":837,"line_end":837,"column_start":40,"column_end":55},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1017},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":179549,"byte_end":179562,"line_start":893,"line_end":893,"column_start":31,"column_end":44},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":181562,"byte_end":181577,"line_start":933,"line_end":933,"column_start":31,"column_end":46},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":183834,"byte_end":183846,"line_start":988,"line_end":988,"column_start":42,"column_end":54},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2125},"to":{"krate":15,"index":68}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\channel\\mpmc.rs","byte_start":186236,"byte_end":186248,"line_start":1044,"line_end":1044,"column_start":47,"column_end":59},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2125},"to":{"krate":15,"index":82}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":191074,"byte_end":191088,"line_start":35,"line_end":35,"column_start":6,"column_end":20},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":191407,"byte_end":191417,"line_start":51,"line_end":51,"column_start":6,"column_end":16},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195581,"byte_end":195604,"line_start":157,"line_end":157,"column_start":9,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195746,"byte_end":195769,"line_start":162,"line_end":162,"column_start":9,"column_end":32},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":195837,"byte_end":195860,"line_start":167,"line_end":167,"column_start":9,"column_end":32},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":196032,"byte_end":196055,"line_start":174,"line_end":174,"column_start":27,"column_end":50},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":197944,"byte_end":197969,"line_start":233,"line_end":233,"column_start":9,"column_end":34},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":198045,"byte_end":198070,"line_start":238,"line_end":238,"column_start":9,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":198274,"byte_end":198299,"line_start":246,"line_end":246,"column_start":9,"column_end":34},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":199338,"byte_end":199363,"line_start":276,"line_end":276,"column_start":9,"column_end":34},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1169},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\manual_reset_event.rs","byte_start":199500,"byte_end":199525,"line_start":284,"line_end":284,"column_start":9,"column_end":34},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":201864,"byte_end":201878,"line_start":43,"line_end":43,"column_start":6,"column_end":20},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":202197,"byte_end":202207,"line_start":60,"line_end":60,"column_start":6,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211420,"byte_end":211437,"line_start":283,"line_end":283,"column_start":9,"column_end":26},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1253},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211629,"byte_end":211646,"line_start":290,"line_end":290,"column_start":39,"column_end":56},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1253},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":211900,"byte_end":211917,"line_start":300,"line_end":300,"column_start":40,"column_end":57},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1253},"to":{"krate":2,"index":2229}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212082,"byte_end":212099,"line_start":307,"line_end":307,"column_start":43,"column_end":60},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1253},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212848,"byte_end":212870,"line_start":326,"line_end":326,"column_start":9,"column_end":31},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":212970,"byte_end":212992,"line_start":331,"line_end":331,"column_start":9,"column_end":31},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":213199,"byte_end":213221,"line_start":339,"line_end":339,"column_start":9,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":214359,"byte_end":214381,"line_start":370,"line_end":370,"column_start":9,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1275},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":214524,"byte_end":214546,"line_start":378,"line_end":378,"column_start":9,"column_end":31},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215417,"byte_end":215429,"line_start":406,"line_end":406,"column_start":9,"column_end":21},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1306},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215583,"byte_end":215595,"line_start":411,"line_end":411,"column_start":9,"column_end":21},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1306},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215687,"byte_end":215699,"line_start":416,"line_end":416,"column_start":9,"column_end":21},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1306},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\mutex.rs","byte_start":215930,"byte_end":215942,"line_start":425,"line_end":425,"column_start":30,"column_end":42},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":219828,"byte_end":219842,"line_start":41,"line_end":41,"column_start":6,"column_end":20},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":220221,"byte_end":220235,"line_start":59,"line_end":59,"column_start":6,"column_end":20},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231081,"byte_end":231105,"line_start":306,"line_end":306,"column_start":9,"column_end":33},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231289,"byte_end":231313,"line_start":313,"line_end":313,"column_start":27,"column_end":51},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":231847,"byte_end":231871,"line_start":327,"line_end":327,"column_start":36,"column_end":60},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232867,"byte_end":232896,"line_start":352,"line_end":352,"column_start":9,"column_end":38},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":232972,"byte_end":233001,"line_start":357,"line_end":357,"column_start":9,"column_end":38},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":233209,"byte_end":233238,"line_start":365,"line_end":365,"column_start":9,"column_end":38},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":234689,"byte_end":234718,"line_start":403,"line_end":403,"column_start":9,"column_end":38},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1410},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":234859,"byte_end":234888,"line_start":411,"line_end":411,"column_start":9,"column_end":38},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236197,"byte_end":236213,"line_start":439,"line_end":439,"column_start":50,"column_end":66},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1436},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236354,"byte_end":236370,"line_start":441,"line_end":441,"column_start":50,"column_end":66},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1436},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236433,"byte_end":236449,"line_start":443,"line_end":443,"column_start":48,"column_end":64},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1436},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\sync\\semaphore.rs","byte_start":236674,"byte_end":236690,"line_start":451,"line_end":451,"column_start":27,"column_end":43},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":241994,"byte_end":241998,"line_start":8,"line_end":8,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2046},"to":{"krate":0,"index":1482}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":242865,"byte_end":242874,"line_start":34,"line_end":34,"column_start":27,"column_end":36},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243056,"byte_end":243065,"line_start":41,"line_end":41,"column_start":6,"column_end":15},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":243653,"byte_end":243662,"line_start":60,"line_end":60,"column_start":16,"column_end":25},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1484},"to":{"krate":0,"index":1482}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244080,"byte_end":244088,"line_start":77,"line_end":77,"column_start":31,"column_end":39},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244240,"byte_end":244248,"line_start":83,"line_end":83,"column_start":10,"column_end":18},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\clock.rs","byte_start":244437,"byte_end":244445,"line_start":92,"line_end":92,"column_start":20,"column_end":28},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1496},"to":{"krate":0,"index":1482}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":245679,"byte_end":245694,"line_start":39,"line_end":39,"column_start":6,"column_end":21},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":245932,"byte_end":245947,"line_start":50,"line_end":50,"column_start":20,"column_end":35},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":1760}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246197,"byte_end":246212,"line_start":58,"line_end":58,"column_start":13,"column_end":28},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":1765}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246237,"byte_end":246252,"line_start":60,"line_end":60,"column_start":21,"column_end":36},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":1797}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246489,"byte_end":246504,"line_start":70,"line_end":70,"column_start":14,"column_end":29},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":1786}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":246866,"byte_end":246876,"line_start":84,"line_end":84,"column_start":6,"column_end":16},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":252856,"byte_end":252875,"line_start":238,"line_end":238,"column_start":9,"column_end":28},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1563},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253011,"byte_end":253030,"line_start":243,"line_end":243,"column_start":9,"column_end":28},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1563},"to":{"krate":2,"index":2046}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253094,"byte_end":253113,"line_start":247,"line_end":247,"column_start":48,"column_end":67},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1563},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":253281,"byte_end":253300,"line_start":253,"line_end":253,"column_start":27,"column_end":46},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":255057,"byte_end":255076,"line_start":296,"line_end":296,"column_start":42,"column_end":61},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1563},"to":{"krate":0,"index":1557}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":255686,"byte_end":255705,"line_start":313,"line_end":313,"column_start":37,"column_end":56},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1563},"to":{"krate":0,"index":1560}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":256396,"byte_end":256415,"line_start":335,"line_end":335,"column_start":43,"column_end":62},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1563},"to":{"krate":0,"index":1554}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":257121,"byte_end":257137,"line_start":358,"line_end":358,"column_start":31,"column_end":47},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1591},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":257296,"byte_end":257312,"line_start":364,"line_end":364,"column_start":21,"column_end":37},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1591},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258262,"byte_end":258278,"line_start":391,"line_end":391,"column_start":26,"column_end":42},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1591},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":258379,"byte_end":258395,"line_start":397,"line_end":397,"column_start":19,"column_end":35},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1591},"to":{"krate":2,"index":2253}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259135,"byte_end":259146,"line_start":417,"line_end":417,"column_start":26,"column_end":37},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":2034}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259185,"byte_end":259196,"line_start":419,"line_end":419,"column_start":31,"column_end":42},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":6548}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259350,"byte_end":259361,"line_start":425,"line_end":425,"column_start":21,"column_end":32},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1608},"to":{"krate":2,"index":8961}},{"span":{"file_name":"C:\\Users\\Eduardo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-intrusive-0.3.1\\src\\timer\\timer.rs","byte_start":259752,"byte_end":259763,"line_start":438,"line_end":438,"column_start":26,"column_end":37},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1608},"to":{"krate":15,"index":17}}]}